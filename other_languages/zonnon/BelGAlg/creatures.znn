(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-GAlg suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* BEL-GAlg is an application for the BEL framework.  They are .NET libraries *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This file is 5 of 7 creating a genetic algorithm for parameter estimation. *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type                                                                       *)
(*   Lineage                                                                  *)
(*      Variables : birthID    - like the creature's social security number   *)
(*                : fitness    - measure of how strong/good the creature is   *)
(*                : parameters - the model parameters, or phenotype           *)
(*                : parentSimilarity        -  used when selecting mates      *)
(*                : probabilityOfMutation   -  applies to their children      *)
(*                : probabilityOfCrossover  -  applies to their children      *)
(*   Creature                                                                 *)
(*      Variable  : lineage    - an instance of Lineage - the geneology       *)
(*      Methods   : Clone      - returns a deep copy of itself                *)
(*                : Create     - prepares a creature for use                  *)
(*                : Get        - retrieves the genotype held by the creature  *)
(*                : Alien      - creates a creature with known parameters     *)
(*                : Procreate  - creates the first generation  of creatures   *)
(*                : Conceive   - creates all other generations of creatures   *)
(*                : Equals     - determines if two creatures are clones       *)
(*                : AssignProbabilities  -  in the creature's lineage         *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)


module {public} BelGAlg.Creatures;


   import
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      Bel.Entity             as Entity,
      Bel.Object             as Object,
      Bel.Types              as T,
      BelGAlg.Chromosomes    as C,
      BelGAlg.Genomes        as G,
      BelGAlg.Statistics     as S;


   const
      minProbabilityOfMutation  = 0.001;
      maxProbabilityOfMutation  = 0.1;
      minProbabilityOfCrossover = 0.6;
      maxProbabilityOfCrossover = 0.9;


   var {public}
      birthNumber : integer;


   type {public, ref} Lineage = object implements Object

      var {public}
         birthID                : integer;
         fitness                : real;
         parameters             : S.RealVector;
         parentSimilarity       : real;
         probabilityOfMutation  : real;
         probabilityOfCrossover : real;

      procedure {public} Initialize
         implements Object.Initialize;
      begin
         birthID                := 0;
         fitness                := -T.MaximumReal;
         parameters             := nil;
         parentSimilarity       := 0.0;
         probabilityOfMutation  := 0.0;
         probabilityOfCrossover := 0.0
      end Initialize;

      procedure {public} Nullify
         implements Object.Nullify;
      begin
         Initialize
      end Nullify;

      procedure {public} Clone () : object{Object}
         implements Object.Clone;
         var
            l : Lineage;
            o : object{Object};
      begin
         l         := new Lineage;
         l.birthID := birthID;
         l.fitness := fitness;
         if parameters # nil then
            l.parameters := new S.RealVector(len(parameters));
            l.parameters := parameters
         else
            l.parameters := nil
         end;
         l.parentSimilarity       := parentSimilarity;
         l.probabilityOfMutation  := probabilityOfMutation;
         l.probabilityOfCrossover := probabilityOfCrossover;
         o := Object(l);
         return o
      end Clone;

      procedure {public} Load (br : BinaryReader)
         implements Object.Load;
      begin
         birthID                := T.LoadInteger(br);
         fitness                := T.LoadReal(br);
         parameters             := T.LoadRealVector(br);
         parentSimilarity       := T.LoadReal(br);
         probabilityOfMutation  := T.LoadReal(br);
         probabilityOfCrossover := T.LoadReal(br)
      end Load;

      procedure {public} Store (bw : BinaryWriter)
         implements Object.Store;
      begin
         T.StoreInteger   (bw, birthID);
         T.StoreReal      (bw, fitness);
         T.StoreRealVector(bw, parameters);
         T.StoreReal      (bw, parentSimilarity);
         T.StoreReal      (bw, probabilityOfMutation);
         T.StoreReal      (bw, probabilityOfCrossover)
      end Store;

   begin
      Initialize
   end Lineage;


   type {public, ref} Creature = object implements Entity

      var {private}
         fixParam : S.RealVector;
         genome   : G.Genome;
         varParam : S.BooleanVector;
      var {public, immutable}
         lineage  : Lineage;

      procedure {public} Initialize
         implements Entity.Initialize;
      begin
         fixParam := nil;
         genome   := nil;
         varParam := nil;
         lineage  := nil
      end Initialize;

      procedure {public} Nullify
         implements Entity.Nullify;
      begin
         fixParam := nil;
         if genome # nil then
            genome.Nullify
         end;
         genome   := nil;
         varParam := nil;
         if lineage # nil then
            lineage.Nullify
         end;
         lineage := nil
      end Nullify;

      procedure {public} Clone () : Creature;
         var
            c          : Creature;
            chromosome : C.Chromosome;
            i          : integer;
      begin
         c := new Creature;
         if fixParam # nil then
            c.fixParam := new S.RealVector(len(fixParam));
            c.fixParam := fixParam
         else
            c.fixParam := nil
         end;
         c.genome   := new G.Genome;
         c.genome   := genome.Clone();
         c.varParam := new S.BooleanVector(len(varParam));
         c.varParam := varParam;
         c.lineage  := new Lineage;
         c.lineage  := Lineage(lineage.Clone());
         return c
      end Clone;

      procedure {public} Create (fixedParameters : S.RealVector;
                                 varyParameters  : S.BooleanVector);
      begin
         if fixedParameters # nil then
            fixParam := new S.RealVector(len(fixedParameters));
            fixParam := fixedParameters
         else
            fixParam := nil
         end;
         genome   := new G.Genome;
         varParam := new S.BooleanVector(len(varyParameters));
         varParam := varyParameters;
         lineage  := new Lineage
      end Create;

      procedure {public} Get () : G.Genome;
         var
            g : G.Genome;
      begin
         g := new G.Genome;
         g := genome.Clone();
         return g
      end Get;

      procedure {public} Equals (c : Creature) : boolean;
      begin
         return (genome = c.genome)
      end Equals;

      procedure {private} AssignParameters;
         var
            estParam              : S.RealVector;
            i, length, nFix, nVar : integer;
      begin
         estParam := new S.RealVector(S.dimP);
         estParam := genome.Decode();
         if fixParam # nil then
            length := len(fixParam) + len(estParam)
         else
            length := len(estParam)
         end;
         lineage.parameters := new S.RealVector(length);
         nFix               := 0;
         nVar               := 0;
         for i := 0 to length-1 do
            if varParam[i] then
               lineage.parameters[i] := estParam[nVar];
               inc(nVar)
            else
               lineage.parameters[i] := fixParam[nFix];
               inc(nFix)
            end
         end;
         lineage.fitness := S.Fitness(lineage.parameters)
      end AssignParameters;

      procedure {public} Alien (parameters,
                                minParameters, maxParameters : S.RealVector;
                                numberOfSignificantFigures   : integer);
      begin
         genome := new G.Genome;
         genome.Create(minParameters, maxParameters,
                       numberOfSignificantFigures);
         genome.Encode(parameters);
         inc(birthNumber);
         lineage.birthID := birthNumber;
         AssignParameters;
         lineage.parentSimilarity       := 0.0;
         lineage.probabilityOfMutation  := maxProbabilityOfMutation;
         lineage.probabilityOfCrossover := maxProbabilityOfCrossover
      end Alien;

      procedure {public} Procreate (minParameters, maxParameters : S.RealVector;
                                    numberOfSignificantFigures   : integer);
      begin
         genome := new G.Genome;
         genome.Create(minParameters, maxParameters,
                       numberOfSignificantFigures);
         inc(birthNumber);
         lineage.birthID := birthNumber;
         AssignParameters;
         lineage.parentSimilarity       := 0.0;
         lineage.probabilityOfMutation  := maxProbabilityOfMutation;
         lineage.probabilityOfCrossover := maxProbabilityOfCrossover
      end Procreate;

      procedure {public} Conceive (parentA, parentB       : Creature;
                                   var numberOfMutations  : integer;
                                   var numberOfCrossovers : integer);
         var
            childA, childB                                 : G.Genome;
            estParamA, estParamB, parametersA, parametersB : S.RealVector;
            fitnessA, fitnessB                             : real;
            i, length, nFix, numberOfMutationsA,
               numberOfMutationsB, nVar                    : integer;
      begin
         estParamA := nil;
         estParamB := nil;
         if parentA.fixParam # nil then
            fixParam := new S.RealVector(len(parentA.fixParam));
            fixParam := parentA.fixParam
         else
            fixParam := nil
         end;
         varParam := new S.BooleanVector(len(parentA.varParam));
         varParam := parentA.varParam;
         lineage  := new Lineage;
         inc(birthNumber);
         lineage.birthID := birthNumber;
         lineage.parentSimilarity :=
            G.Similarity(parentA.genome, parentB.genome);
         lineage.probabilityOfMutation
            := (parentA.lineage.probabilityOfMutation
             +  parentB.lineage.probabilityOfMutation) / 2.0;
         lineage.probabilityOfCrossover
            := (parentA.lineage.probabilityOfCrossover
             +  parentB.lineage.probabilityOfCrossover) / 2.0;
         G.Crossover(lineage.probabilityOfCrossover, parentA.genome,
                     parentB.genome, numberOfCrossovers, childA, childB);
         (* child A *)
         numberOfMutationsA := 0;
         childA.Mutate(lineage.probabilityOfMutation, numberOfMutationsA);
         estParamA := childA.Decode();
         if fixParam # nil then
            length := len(fixParam) + len(estParamA)
         else
            length := len(estParamA)
         end;
         parametersA := new S.RealVector(length);
         nFix        := 0;
         nVar        := 0;
         for i := 0 to length-1 do
            if varParam[i] then
               parametersA[i] := estParamA[nVar];
               inc(nVar)
            else
               parametersA[i] := fixParam[nFix];
               inc(nFix)
            end
         end;
         fitnessA := S.Fitness(parametersA);
         (* child B *)
         numberOfMutationsB := 0;
         childB.Mutate(lineage.probabilityOfMutation, numberOfMutationsB);
         estParamB   := childB.Decode();
         parametersB := new S.RealVector(length);
         nFix        := 0;
         nVar        := 0;
         for i := 0 to length-1 do
            if varParam[i] then
               parametersB[i] := estParamB[nVar];
               inc(nVar)
            else
               parametersB[i] := fixParam[nFix];
               inc(nFix)
            end
         end;
         fitnessB := S.Fitness(parametersB);
         (* keep the more fit of the two children *)
         lineage.parameters := new S.RealVector(length);
         if fitnessA > fitnessB then
            genome             := childA;
            numberOfMutations  := numberOfMutations + numberOfMutationsA;
            lineage.parameters := parametersA;
            lineage.fitness    := fitnessA
         else
            genome             := childB;
            numberOfMutations  := numberOfMutations + numberOfMutationsB;
            lineage.parameters := parametersB;
            lineage.fitness    := fitnessB
         end
      end Conceive;

      procedure {public} AssignProbabilities (maxFitness, avgFitness : real);
      begin
         (* adaptive genetic algorithm protocol *)
         if lineage.fitness < avgFitness then
            lineage.probabilityOfMutation  := maxProbabilityOfMutation;
            lineage.probabilityOfCrossover := maxProbabilityOfCrossover
         else
            lineage.probabilityOfMutation := maxProbabilityOfMutation
               - (maxProbabilityOfMutation - minProbabilityOfMutation)
               * (lineage.fitness - avgFitness) / (maxFitness - avgFitness);
            lineage.probabilityOfCrossover := (maxProbabilityOfCrossover
               - (maxProbabilityOfCrossover - minProbabilityOfCrossover)
               * (lineage.fitness - avgFitness) / (maxFitness - avgFitness))
               / real(S.dimP)
         end
      end AssignProbabilities;

   begin
      Initialize
   end Creature;

   operator {public} "=" (l, r : Creature) : boolean;
   begin
      return l.Equals(r)
   end "=";

   operator {public} "#" (l, r : Creature) : boolean;
   begin
      return ~l.Equals(r)
   end "#";

begin
   birthNumber := 0
end Creatures.