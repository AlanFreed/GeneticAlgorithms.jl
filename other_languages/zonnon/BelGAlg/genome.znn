(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-GAlg suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* BEL-GAlg is an application for the BEL framework.  They are .NET libraries *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This file is 4 of 7 creating a genetic algorithm for parameter estimation. *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type                                                                       *)
(*   Genome                                                                   *)
(*      Get        : implements [].Get                                        *)
(*      Set        : implements [].Set                                        *)
(*      Initialize : implements Bel.Entity.Initialize                         *)
(*      Nullify    : implements Bel.Entity.Nullify                            *)
(*      Clone      : returns a deep copy of itself                            *)
(*      Create     : prepares the encoder/decoder for handling a parameter    *)
(*      Equals     : determines if two genome are clones of one another       *)
(*      Strands    : the number chromosomes that makes up the genome          *)
(*      Length     : the number of genes that makes up the genome             *)
(*      Mutate     : scans over internal array of chromosomes for mutations   *)
(*      Encode     : phenotype array ==> genome genotype for model parameter  *)
(*      Decode     : genome genotype ==> phenotype array for model parameter  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedures                                                                 *)
(*   Crossover     : genetic splicing : creates 2 children from 2 parents     *)
(*   Similarity    : the fraction of equal allele between a pair of genome    *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)


module {public} BelGAlg.Genomes;

   import
      Bel.Log             as Log,
      Bel.Entity          as Entity,
      BelGAlg.Statistics  as S,
      BelGAlg.Genes       as G,
      BelGAlg.Chromosomes as C;


   type {public}
      Genotype = array * of C.Chromosome;


   procedure {public} Crossover (probabilityOfCrossover : real;
                                 parentA, parentB       : Genome;
                                 var numberOfCrossovers : integer;
                                 var childA, childB     : Genome);
      var
         cA, cB, pA, pB : C.Chromosome;
         i              : integer;
   begin
      childA := new Genome;
      childB := new Genome;
      if parentA.Strands() = parentB.Strands() then
         childA := parentA.Clone();
         childB := parentB.Clone();
         for i := 0 to parentA.Strands()-1 do
            pA := parentA[i];
            pB := parentB[i];
            C.Crossover(probabilityOfCrossover, pA, pB,
                        numberOfCrossovers,     cA, cB);
            childA[i] := cA;
            childB[i] := cB
         end
      else
         Log.ErrorMessage(212,20, "BelGAlg.Genomes.Crossover")
      end
   end Crossover;


   procedure {public} Similarity (genomeA, genomeB : Genome) : real;
      var
         c, count, chromosomes, g, genes : integer;
         chromosomeA, chromosomeB        : C.Chromosome;
         geneA, geneB                    : G.Gene;
         fraction                        : real;
   begin
      count       := 0;
      chromosomes := genomeA.Strands();
      for c := 0 to chromosomes-1 do
         chromosomeA := genomeA[c];
         chromosomeB := genomeB[c];
         genes       := chromosomeA.Length();
         for g := 0 to genes-1 do
            geneA := chromosomeA[g];
            geneB := chromosomeB[g];
            if geneA = geneB then
               inc(count)
            end;
         end
      end;
      if count = genomeA.Length() then
         fraction := 1.0
      elsif count > 0 then
         fraction := real(count) / real(genomeA.Length())
      else
         fraction := 0.0
      end;
      return fraction
   end Similarity;


   type {public, ref} Genome = object implements [], Entity

      var
         genome : Genotype;

      procedure {public} Get (strand : integer) : C.Chromosome
         implements [].Get;
         var
            c : C.Chromosome;
      begin
         c := genome[strand];
         return c
      end Get;

      procedure {public} Set (strand : integer; c : C.Chromosome)
         implements [].Set;
      begin
         genome[strand] := c
      end Set;

      procedure {public} Initialize
         implements Entity.Initialize;
      begin
         genome := nil
      end Initialize;

      procedure {public} Nullify
         implements Entity.Nullify;
      begin
         genome := nil
      end Nullify;

      procedure {public} Clone () : Genome;
         var
            c : C.Chromosome;
            g : Genome;
            i : integer;
      begin
         g        := new Genome;
         g.genome := new Genotype(Strands());
         for i := 0 to Strands()-1 do
            c           := genome[i];
            g.genome[i] := c.Clone()
         end;
         return g
      end Clone;

      procedure {public} Create (minParameters, maxParameters : S.RealVector;
                                 numberOfSignificantFigures   : integer);
         var
            c       : C.Chromosome;
            p, dimP : integer;
            s       : string;
      begin
         dimP := len(maxParameters);
         if (dimP > 0) & (len(minParameters) = dimP) then
            genome := new Genotype(dimP)
         else
            s := "Lengths of minParameters and maxParameters must equal.";
            Log.Message(s);
            Log.ErrorMessage(212,20, "BelGAlg.Genomes.Genome.Initialize")
         end;
         for p := 0 to dimP-1 do
            c := new C.Chromosome;
            c.Create(minParameters[p], maxParameters[p],
                     numberOfSignificantFigures);
            genome[p] := c
         end
      end Create;

      procedure {public} Equals (r : Genome) : boolean;
         var
            p : integer;
      begin
         if Strands() = r.Strands() then
            p := 0;
            loop
               if p = Strands() then
                  return true
               end;
               if genome[p] # r.genome[p] then
                  return false
               end;
               inc(p)
            end
         else
            return false
         end
      end Equals;

      procedure {public} Strands () : integer;
      begin
         if genome # nil then
            return len(genome)
         else
            return 0
         end
      end Strands;

      procedure {public} Length () : integer;
         var
            chromosome : C.Chromosome;
            i, length  : integer;
      begin
         length := 0;
         for i := 0 to Strands()-1 do
            chromosome := genome[i];
            length     := length + chromosome.Length()
         end;
         return length
      end Length;

      procedure {public} Mutate (probabilityOfMutation : real;
                                 var numberOfMutations : integer);
         var
            c : C.Chromosome;
            p : integer;
      begin
         for p := 0 to Strands()-1 do
            c := genome[p];
            c.Mutate(probabilityOfMutation, numberOfMutations);
            genome[p] := c
         end
      end Mutate;

      procedure {public} Decode () : S.RealVector;
         var
            chromosome : C.Chromosome;
            p          : integer;
            parameters : S.RealVector;
      begin
         parameters := new S.RealVector(Strands());
         for p := 0 to Strands()-1 do
            chromosome    := genome[p];
            parameters[p] := chromosome.Decode()
         end;
         return parameters
      end Decode;

      procedure {public} Encode (phenotype : S.RealVector);
         var
            chromosome : C.Chromosome;
            p          : integer;
            s          : string;
      begin
         if len(phenotype) = Strands() then
            for p := 0 to Strands()-1 do
               chromosome := genome[p];
               chromosome.Encode(phenotype[p]);
               genome[p] := chromosome
            end
         else
            s := "The phenotype must have length equal to # parameters.";
            Log.Message(s);
            Log.ErrorMessage(212,20, "BelGAlg.Genomes.Genome.Encode")
         end
      end Encode;

   begin
      Initialize
   end Genome;

   operator {public} "=" (l, r : Genome) : boolean;
   begin
      return l.Equals(r)
   end "=";

   operator {public} "#" (l, r : Genome) : boolean;
   begin
      return ~l.Equals(r)
   end "#";

begin
end Genomes.