(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-GAlg suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* BEL-GAlg is an application for the BEL framework.  They are .NET libraries *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This file is 3 of 7 creating a genetic algorithm for parameter estimation. *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* A chromosome is a repository for genetic material in living organisms.     *)
(* Here, a chromosome associates with a single parameter in a mathematical    *)
(* model whose optimum value is being sought by mimicing nature's processes   *)
(* of genetic manipulation and evolution.                                     *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* A chromosome is a string of genes whose expressions are called the allele. *)
(* An index and a locus are two pointers to a chromosome string defined by:   *)
(*   E.g., consider a representative 8-bit chromosome with alphabet {A, B}    *)
(*     chromosome index  :   0   1   2   3   4   5   6   7                    *)
(*     chromosome string : ( A   B   A   A   B   B   B   A ) - its genotype   *)
(*     chromosome locus  :     1   2   3   4   5   6   7                      *)
(* The loci point between the indices.                                        *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type                                                                       *)
(*   Chromosome    : a haploid chromosome based on the BelGAlg.Genes.Gene     *)
(*      Get        : implements [].Get                                        *)
(*                 : returns the gene located at the specified index          *)
(*      Set        : implements [].Set                                        *)
(*                 : assigns a gene to the chromosome at the specified index  *)
(*      Initialize : implements Bel.Entity.Initialize                         *)
(*      Nullify    : implements Bel.Entity.Nullify                            *)
(*      Parse      : implements Bel.Typeset.Parse                             *)
(*      Print      : implements Bel.Typeset.Print                             *)
(*      Clone      : returns a deep copy of itself                            *)
(*      Create     : prepares the encoder/decoder for decoding a parameter    *)
(*      Equals     : determines if two chromosomes have same gene expression  *)
(*      Length     : the number genes that makes up the chromosome            *)
(*      Mutate     : scan over the internal array of genes for mutating       *)
(*      Decode     : chromosome genotype ==> model-parameter phenotype        *)
(*      Encode     : model-parameter phenotype ==> chromosome genotype        *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedure                                                                  *)
(*   Crossover     :  genetic splicing : creates 2 children from 2 parents    *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)


module {public} BelGAlg.Chromosomes;

   import
      Bel.Log            as Log,
      Bel.Entity         as Entity,
      Bel.Typeset        as Typeset,
      Bel.Types          as T,
      Bel.Math           as Fn,
      BelGAlg.Statistics as S,
      BelGAlg.Genes      as G;

   var {private}
      dominant,
      recessive : G.Gene;
      evenOdds  : real;
      maxPower  : integer{64};

   type {private}
      CharVector   = array * of char;
      BinaryVector = array * of integer{8};

   type {public}
      Haploid = array * of G.Gene;

   procedure {public} Crossover (probabilityOfCrossover : real;
                                 parentA, parentB       : Chromosome;
                                 var numberOfCrossovers : integer;
                                 var childA, childB     : Chromosome);
      var
         gene     : G.Gene;
         i, xover : integer;
   begin
      childA := new Chromosome;
      childB := new Chromosome;
      if parentA.Length() = parentB.Length() then
         childA := parentA.Clone();
         childB := parentB.Clone();
         if S.FlipHeads(probabilityOfCrossover) then
            xover := S.RandomIntegerBetween(1, parentA.Length()-2);
            for i := xover to parentA.Length()-1 do
               gene      := childA[i];
               childA[i] := childB[i];
               childB[i] := gene
            end;
            inc(numberOfCrossovers)
         end;
      else
         Log.Message("Chromosome parents must belong to the same phenotype");
         Log.ErrorMessage(515,20, "BelGAlg.Chromosomes.Crossover")
      end
   end Crossover;

   (* two neighboring binary values typically vary at more than one index *)
   (* two neighboring Gray coded binary numbers vary by only a single bit *)

   procedure {private} BinaryToGray (var binary, gray : BinaryVector);
   (* binary is made a var agrument for efficiency reasons only *)
      var
         i : integer;
   begin
      gray[0] := binary[0];
      for i := 1 to len(binary)-1 do
         (* XOR logic *)
         if binary[i] # binary[i-1] then
            gray[i] := 1
         else
            gray[i] := 0
         end
      end
   end BinaryToGray;

   procedure {private} GrayToBinary (var gray, binary : BinaryVector);
   (* gray is made a var argument for efficiency reasons only *)
      var
         i : integer;
         k : integer{8};
   begin
      k := gray[0];
      binary[0] := k;
      for i := 1 to len(gray)-1 do
         if gray[i] = 1 then
            if k = 0 then
               k := 1
            else
               k := 0
            end
         end;
         binary[i] := k
      end
   end GrayToBinary;

   procedure {private} BinaryToInteger
                                    (var b : BinaryVector; var i : integer{64});
   (* b is made a var argument for efficiency reasons only *)
      var
         k     : integer;
         power : integer{64};
   begin
      i     := 0;
      power := 1;
      for k := len(b)-1 to 0 by -1 do
         if b[k] = 1 then
            i := i + power
         end;
         power := 2*power
      end
   end BinaryToInteger;

   procedure {private} IntegerToBinary (i : integer{64}; var b : BinaryVector);
      var
         k, length : integer;
   begin
      k := len(b) - 1;
      while i # 0 do
         b[k] := integer(i mod 2, 8);
         i := i div 2;
         dec(k)
      end;
      length := len(b) - k - 1;
      (* the remaining higher-order binary digits are all zeros *)
      for k := len(b)-length-1 to 0 by -1 do
         b[k] := 0
      end
   end IntegerToBinary;


   type {public, ref} Chromosome = object implements [], Entity, Typeset

      var {private}
         chromosome   : Haploid;      (* a single gene-strand chromosome      *)
         maxPhenotype : real;         (* upper bound on the parameter field   *)
         minPhenotype : real;         (* lower bound on the parameter field   *)
         fullRangeRe  : real;         (* full range of integer representation *)
         fullRangeInt : integer{64};  (* integer representation of full range *)

      procedure {public} Get (index : integer) : G.Gene
         implements [].Get;
         var
            g : G.Gene;
      begin
         g := chromosome[index];
         return g
      end Get;

      procedure {public} Set (index : integer; gene : G.Gene)
         implements [].Set;
      begin
         chromosome[index] := gene
      end Set;

      procedure {public} Initialize
         implements Entity.Initialize;
      begin
         chromosome   := nil;
         maxPhenotype := 0.0;
         minPhenotype := 0.0;
         fullRangeRe  := 0.0;
         fullRangeInt := 0
      end Initialize;

      procedure {public} Nullify
         implements Entity.Nullify;
      begin
         Initialize
      end Nullify;

      procedure {public} Parse (genotype : string)
         implements Typeset.Parse;
         var
            a, b                  : CharVector;
            g                     : G.Gene;
            i, j, length, startAt : integer;
            s                     : string;
      begin
         a := new CharVector(len(genotype)+2);
         copy(genotype, a);
         (* pass over any leading white space *)
         i := 0;
         while a[i] = " " do
            inc(i)
         end;
         startAt := i;
         (* determine the length of the supplied genotype *)
         length := 0;
         while (a[i] = "0") or (a[i] = "1") do
            inc(i);
            inc(length)
         end;
         if length > Length() then
            Log.WarningMessage(50,90, "BelGAlg.Chromosomes.Chromosome.Parse");
            (* chop off the overflowed binary digits *)
            startAt := startAt + length - Length();
            length  := Length()
         end;
         (* pad the higher-order binary digits with zeros, if needed *)
         for j := 0 to Length()-length-1 do
            chromosome[j] := recessive
         end;
         (* parse the binary number *)
         b := new CharVector(1);
         for i := startAt to startAt+length-1 do
            b[0] := a[i];
            copy(b, s);
            g.Parse(s);
            chromosome[j] := g;
            inc(j)
         end
      end Parse;

      procedure {public} Print () : string
         implements Typeset.Print;
         var
            a, b : CharVector;
            g    : G.Gene;
            i    : integer;
            s    : string;
      begin
         a := new CharVector(Length()+2);
         b := new CharVector(3);
         for i := 0 to Length()-1 do
            g := chromosome[i];
            s := g.Print();
            copy(s, b);
            a[i] := b[0]
         end;
         copy(a, s);
         (* pad with a space fore and aft *)
         s := " " + s + " ";
         return s
      end Print;

      procedure {public} Clone () : Chromosome;
         var
            c : Chromosome;
            i : integer;
      begin
         c            := new Chromosome;
         c.chromosome := new Haploid(Length());
         for i := 0 to Length()-1 do
            c.chromosome[i] := chromosome[i]
         end;
         c.maxPhenotype := maxPhenotype;
         c.minPhenotype := minPhenotype;
         c.fullRangeRe  := fullRangeRe;
         c.fullRangeInt := fullRangeInt;
         return c
      end Clone;

      procedure {public} Create (minParameter, maxParameter : real;
                                 numberOfSignificantFigures : integer);
         var
            diff            : real;
            g               : G.Gene;
            i, k            : integer;
            interval, power : integer{64};
            s               : string;
      begin
         if minParameter > maxParameter then
            Log.Message("maxParamter must be greater than minParameter");
            Log.ErrorMessage(408,20, "BelGAlg.Chromosomes.Chromosome.Create")
         end;
         diff     := maxParameter - minParameter;
         interval := integer(Fn.Max(1.0, Fn.Ceiling(diff)), 64);
         for i := 1 to numberOfSignificantFigures do
            interval := 10*interval
         end;
         i     := 0;
         power := 1;
         repeat
            if power >= maxPower then
               s := "The number of significant figures, or precision, ";
               s := s + T.IntegerToString(numberOfSignificantFigures);
               Log.Message(s);
               s := "is too great for an assigned parameter range.";
               Log.Message(s);
               Log.ErrorMessage(50,415, "BelGAlg.Chromosomes.Chromosome.Create")
            end;
            inc(i);
            power := 2*power
         until power > interval;
         dec(power);
         if i < 5 then
            i := 5
         end;
         chromosome := new Haploid(i);
         for k := 0 to i-1 do
            (* assign random alleles to the chromosome strand *)
            g.Initialize;
            chromosome[k] := g
         end;
         minPhenotype := minParameter;
         maxPhenotype := maxParameter;
         fullRangeInt := power;
         fullRangeRe  := real(power)
      end Create;

      procedure {public} Length () : integer;
      begin
         if chromosome # nil then
            return len(chromosome)
         else
            return 0
         end
      end Length;

      procedure {public} Mutate (probabilityOfMutation : real;
                                 var numberOfMutations : integer);
         var
            g : G.Gene;
            i : integer;
      begin
         for i := 0 to Length()-1 do
            g := chromosome[i];
            g.Mutate(probabilityOfMutation, numberOfMutations);
            chromosome[i] := g
         end
      end Mutate;

      procedure {private} IntegerToReal (int : integer{64}; var n : real);
      begin
         n := minPhenotype
            + (maxPhenotype - minPhenotype) * real(int) / fullRangeRe;
         (* address possible roundoff discrepancies *)
         if n < minPhenotype then
            n := minPhenotype
         end;
         if n > maxPhenotype then
            n := maxPhenotype
         end
      end IntegerToReal;

      procedure {public} Decode () : real;
         var
            binary, gray : BinaryVector;
            i            : integer;
            int          : integer{64};
            phenotype    : real;
      begin
         if Length() > 0 then
            binary := new BinaryVector(Length());
            gray   := new BinaryVector(Length());
            (* chromosomes are Gray encoded *)
            for i := 0 to Length()-1 do
               if chromosome[i] = dominant then
                  gray[i] := 1
               else
                  gray[i] := 0
               end
            end;
            GrayToBinary(gray, binary);
            BinaryToInteger(binary, int);
            IntegerToReal(int, phenotype)
         else
            phenotype := 0.0
         end;
         return phenotype
      end Decode;

      procedure {private} RealToInteger (n : real; var int : integer{64});
         var
            interval : real;
      begin
         (* (minPhenotype)  0 <= interval <= fullRangeRe  (maxPhenotype) *)
         interval := fullRangeRe * (n - minPhenotype)
                   / (maxPhenotype - minPhenotype);
         int      := integer(Fn.Floor(interval), 64);
         (* address possible roundoff discrepancies *)
         if int < 0 then
            int := 0
         end;
         if int > fullRangeInt then
            int := fullRangeInt
         end
      end RealToInteger;

      procedure {public} Encode (phenotype : real);
         var
            binary, gray : BinaryVector;
            i            : integer;
            int          : integer{64};
      begin
         binary := new BinaryVector(Length());
         gray   := new BinaryVector(Length());
         RealToInteger(phenotype, int);
         IntegerToBinary(int, binary);
         BinaryToGray(binary, gray);
         for i := 0 to Length()-1 do
            if gray[i] = 1 then
               chromosome[i] := dominant
            else
               chromosome[i] := recessive
            end
         end
      end Encode;

      procedure {public} Equals (c : Chromosome) : boolean;
         var
            i : integer;
      begin
         if Length() = c.Length() then
            i := 0;
            loop
               if i >= Length() then
                  return true
               end;
               if chromosome[i] # c.chromosome[i] then
                  return false
               end;
               inc(i)
            end
         else
            return false
         end
      end Equals;

   begin
      Initialize
   end Chromosome;

   operator {public} "=" (l, r : Chromosome) : boolean;
   begin
      return l.Equals(r)
   end "=";

   operator {public} "#" (l, r : Chromosome) : boolean;
   begin
      return ~l.Equals(r)
   end "#";

begin
   dominant.Parse("1");
   recessive.Parse("0");
   evenOdds := 0.5;
   maxPower := max(integer{64}) div 2
end Chromosomes.