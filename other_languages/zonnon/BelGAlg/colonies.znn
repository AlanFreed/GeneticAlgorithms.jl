(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-GAlg suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* BEL-GAlg is an application for the BEL framework.  They are .NET libraries *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This file is 6 of 7 creating a genetic algorithm for parameter estimation. *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* SGA stands for Simple Genetic Algorithm.  SGA was originally written in    *)
(* Pascal, and is nicely documented in the textbook:                          *)
(*   Goldberg, D. E., "Genetic Algorithms in search, optimization & machine   *)
(*                     learning," Addison-Wesley, Boston, 1989.               *)
(* David Goldberg's original SGA code carries the following copywrite notice: *)
(*   { A Simple Genetic Algorithm - SGA - v1.0 }                              *)
(*   { (c)   David Edward Goldberg  1986       }                              *)
(*   {       All Rights Reserved               }                              *)
(* This reinterpretation of Goldberg's original SGA is written in Zonnon - a  *)
(* direct decendent of Pascal.  It is a complete rewrite of SGA.  In this     *)
(* rewrite, efforts have been made to keep true to the spirit of Goldberg's   *)
(* original SGA algorithms.  Formulae used to determine the population size,  *)
(* the number of contestants for tournament play, and the number of           *)
(* generations needed for convergence came from his second book:              *)
(*   Goldberg, D. E., "The Design of Innovation : Lessons from and for        *)
(*                     Competent Genetic Algorithms," Kluwer, Boston, 2002.   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type                                                                       *)
(*   Colony                                                                   *)
(*      Methods                                                               *)
(*         Initialize          - implements Bel.Entity.Initialize             *)
(*         Nullify             - implements Bel.Entity.Nullify                *)
(*         Create              - prepares the GA for optimization             *)
(*         Propagate           - advances the GA to the next generation       *)
(*         Parameters          - returns 'best' set of material parameters    *)
(*         Sensitivity         - runs a sensitivity-like analysis on model    *)
(*         ReportHeader        - writes out the header to a report file       *)
(*         ReportBody          - writes out statistics for current generation *)
(*         ReportFooter        - writes out the footer to a report file       *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} BelGAlg.Colonies;


   import
      System.IO.StreamReader as StreamReader,
      System.IO.StreamWriter as StreamWriter,
      Bel.Entity             as Entity,
      Bel.Object             as Object,
      Bel.Types              as T,
      Bel.TextFiles          as F,
      Bel.Keys               as Keys,
      Bel.List               as List,
      Bel.Math               as Fn,
      BelGAlg.Chromosomes    as C,
      BelGAlg.Genomes        as G,
      BelGAlg.Creatures      as P,
      BelGAlg.Statistics     as S;


   type {public}
      Inhabitants = array * of P.Creature;


   type {public, ref} Colony = object implements Entity

      var {private}
         adults, children, contestants                      : Inhabitants;
         ancestory                                          : List;
         adjustedR2, maxFitness                             : real;
         generation, increment, lines, numberOfBorn,
            numberOfContestants, numberOfCrossovers,
            numberOfGenerations, numberOfGenes,
            numberOfImmigrants, numberOfMutations,
            numberOfSigFigures, populationSize              : integer;
         elite                                              : P.Creature;
         fixParam, maxParam, minParam                       : S.RealVector;
         varParam                                           : S.BooleanVector;
         writer                                             : StreamWriter;

      procedure {public} Initialize
         implements Entity.Initialize;
      begin
         adults              := nil;
         children            := nil;
         contestants         := nil;
         ancestory           := new List;
         adjustedR2          := 0.0;
         maxFitness          := -T.MaximumReal;
         generation          := 0;
         increment           := 0;
         lines               := 0;
         numberOfBorn        := 0;
         numberOfContestants := 0;
         numberOfCrossovers  := 0;
         numberOfGenerations := 0;
         numberOfGenes       := 0;
         numberOfImmigrants  := 0;
         numberOfMutations   := 0;
         numberOfSigFigures  := 0;
         populationSize      := 0;
         elite               := new P.Creature;
         fixParam            := nil;
         maxParam            := nil;
         minParam            := nil;
         varParam            := nil;
         writer              := F.OpenWriter("temp-ga")
      end Initialize;

      procedure {public} Nullify
         implements Entity.Nullify;
      begin
         adults              := nil;
         children            := nil;
         contestants         := nil;
         ancestory.Nullify;
         adjustedR2          := 0.0;
         maxFitness          := -T.MaximumReal;
         generation          := 0;
         increment           := 0;
         lines               := 0;
         numberOfBorn        := 0;
         numberOfContestants := 0;
         numberOfCrossovers  := 0;
         numberOfGenerations := 0;
         numberOfGenes       := 0;
         numberOfImmigrants  := 0;
         numberOfMutations   := 0;
         numberOfSigFigures  := 0;
         populationSize      := 0;
         elite.Nullify;
         fixParam            := nil;
         maxParam            := nil;
         minParam            := nil;
         varParam            := nil;
         F.CloseWriter(writer)
      end Nullify;

      procedure {private} Update (var converged : boolean);
         var
            avgFitness     : real;
            found, success : boolean;
            i              : integer;
            creature       : P.Creature;
            key            : Keys.Key;
      begin
         inc(generation);
         creature            := new P.Creature;
         avgFitness          := 0.0;
         for i := 0 to populationSize-1 do
             creature := adults[i];
             if creature.lineage.fitness > maxFitness then
                elite      := creature;
                maxFitness := elite.lineage.fitness
             end;
             key := creature.lineage.birthID;
             ancestory.Find(key, found);
             if ~found then
                ancestory.Insert(creature.lineage, key, success);
                if success then
                   inc(numberOfBorn)
                end
             end;
             avgFitness := avgFitness + creature.lineage.fitness
         end;
         avgFitness := avgFitness / real(populationSize);
         for i := 0 to populationSize-1 do
            creature := adults[i];
            creature.AssignProbabilities(maxFitness, avgFitness);
            adults[i] := creature
         end;
         adjustedR2   := S.RSquared(elite.lineage.parameters);
         if generation < numberOfGenerations then
            converged := false
         else
            converged := true
         end
      end Update;

      procedure {public} Create (expInput,
                                 expOutput                  : S.RealMatrix;
                                 decimateTo                 : integer;
                                 numericalModel             : S.Model;
                                 varyParameters             : S.BooleanVector;
                                 fixedParameters,
                                 alienParameters,
                                 minParameters,
                                 maxParameters              : S.RealVector;
                                 dimensionOfSchemata,
                                 numberOfSignificantFigures : integer);
         var
            alphabet  : real;
            converged : boolean;
            creature  : P.Creature;
            genome    : G.Genome;
            i         : integer;
      begin
         S.Configure(expInput, expOutput, decimateTo, numericalModel,
                     varyParameters);
         (* assign bounds to the phenotype *)
         varParam := new S.BooleanVector(len(varyParameters));
         varParam := varyParameters;
         if fixedParameters # nil then
            fixParam := new S.RealVector(len(fixedParameters));
            fixParam := fixedParameters
         else
            fixParam := nil
         end;
         minParam := new S.RealVector(len(minParameters));
         minParam := minParameters;
         maxParam := new S.RealVector(len(maxParameters));
         maxParam := maxParameters;
         (* introduce the 'alien' as the elite individual in the colony *)
         elite := new P.Creature;
         elite.Create(fixParam, varParam);
         elite.Alien(alienParameters, minParam, maxParam,
                     numberOfSignificantFigures);
         (* create the population characteristics for the colony *)
         genome         := new G.Genome;
         genome         := elite.Get();
         numberOfGenes  := genome.Length();
         alphabet       := 2.0;  (* dominant and recessive *)
         populationSize := integer(Fn.Ceiling(
                           Fn.Power(alphabet, real(dimensionOfSchemata))
                         * (real(dimensionOfSchemata) * Fn.Ln(alphabet)
                         + Fn.Ln(real(numberOfGenes)))));
         if ~odd(populationSize) then
            inc(populationSize)
         end;
         adults    := new Inhabitants(populationSize);
         adults[0] := elite;
         children  := new Inhabitants(populationSize);
         (* procreate the rest of the original 'first' colony *)
         for i := 1 to populationSize-1 do
            creature := new P.Creature;
            creature.Create(fixParam, varParam);
            creature.Procreate(minParam, maxParam, numberOfSignificantFigures);
            adults[i] := creature
         end;
         (* create the contestants for tournament play *)
         numberOfContestants := populationSize div 50;
         if numberOfContestants < 3 then
            numberOfContestants := 3
         end;
         contestants := new Inhabitants(numberOfContestants);
         (* determine a theoretical estimate for iterations to convergence *)
         numberOfGenerations := integer(Fn.Ceiling(
                                Fn.Sqrt(real(numberOfGenes))
                              * Fn.Ln(real(populationSize))
                              / Fn.Ln(real(numberOfContestants))));
         increment           := numberOfGenerations;
         (* assign the remaining quantities *)
         numberOfSigFigures := numberOfSignificantFigures;
         maxFitness         := elite.lineage.fitness;
         Update(converged)
      end Create;

      (* acquire individual from population for mating via tournament play *)
      procedure {private} Select (var fittest : P.Creature);
      var
         contestant   : P.Creature;
         creature, i  : integer;
         probability  : real;
      begin
         fittest     := new P.Creature;
         probability := 1.0 / real(populationSize);
         if S.FlipHeads(probability) then
            (* an immigrant migrates into the mating pool - adds diversity *)
            inc(numberOfImmigrants);
            fittest.Create(fixParam, varParam);
            fittest.Procreate(minParam, maxParam, numberOfSigFigures)
         else
            (* use tournament play to select an individual for mating *)
            for i := 0 to numberOfContestants-1 do
               creature       := S.RandomIntegerBetween(0, populationSize-1);
               contestants[i] := adults[creature]
            end;
            fittest := contestants[0];
            for i := 1 to numberOfContestants-1 do
               contestant := contestants[i];
               if contestant.lineage.fitness > fittest.lineage.fitness then
                  fittest := contestant
               end
            end
         end
      end Select;

      (* creates the next generation of inhabitants for the community *)
      procedure {private} Mate;
         var
            child, creature, parentA, parentB : P.Creature;
            exists                            : boolean;
            i, j, priorNumberOfCrossovers,
               priorNumberOfImmigrants,
               priorNumberOfMutations         : integer;
      begin
         creature    := new P.Creature;
         parentA     := new P.Creature;
         parentB     := new P.Creature;
         children[0] := elite;
         for i := 1 to populationSize-1 do
            child := new P.Creature;
            child.Create(fixParam, varParam);
            exists := true;
            repeat
               priorNumberOfCrossovers := numberOfCrossovers;
               priorNumberOfImmigrants := numberOfImmigrants;
               priorNumberOfMutations  := numberOfMutations;
               Select(parentA);
               repeat
                  Select(parentB)
               until parentB # parentA;
               child.Conceive(parentA, parentB,
                              numberOfMutations, numberOfCrossovers);
               j := 0;
               loop
                  creature := adults[j];
                  if child = creature then
                     exists := true;
                     dec(P.birthNumber);
                     child.Initialize;
                     child.Create(fixParam, varParam);
                     numberOfCrossovers := priorNumberOfCrossovers;
                     numberOfImmigrants := priorNumberOfImmigrants;
                     numberOfMutations  := priorNumberOfMutations;
                     exit
                  end;
                  if i = j then
                     exists := false;
                     exit
                  end;
                  inc(j)
               end
            until ~exists;
            children[i] := child
         end
      end Mate;

      procedure {public} Propagate (var converged : boolean);
         var
            i : integer;
      begin
         Mate;               (* create the next generation      *)
         for i := 0 to populationSize-1 do
            adults[i] := children[i]
         end;
         Update(converged)   (* search for the new elite citizen *)
      end Propagate;

      procedure {public} Parameters () : S.RealVector;
         var
            p : S.RealVector;
      begin
         p := new S.RealVector(len(elite.lineage.parameters));
         p := elite.lineage.parameters;
         return p
      end Parameters;

      procedure {private} Sensitivity
                                  (var lowerBounds, upperBounds : S.RealVector);
         var
            delta, parameter, power, ten : real;
            i                            : integer;
      begin
         lowerBounds := new S.RealVector(S.dimP);
         upperBounds := new S.RealVector(S.dimP);
         ten         := 10.0;
         power       := real(numberOfSigFigures) / 2.0;
         for i := 0 to S.dimP-1 do
               parameter      := elite.lineage.parameters[i];
               delta          := parameter / Fn.Power(ten, power);
               lowerBounds[i] := parameter - delta;
               upperBounds[i] := parameter + delta
         end
      end Sensitivity;

      procedure {private} ViableCitizens
                                        (lower, upper : S.RealVector) : integer;
         var
            acceptable, moved : boolean;
            data              : object{Object};
            length, p, viable : integer;
            lineage           : P.Lineage;
            parameter         : real;
      begin
         viable := 0;
         length := len(lower);
         ancestory.Home;
         repeat
            data       := ancestory.GetData();
            lineage    := P.Lineage(data);
            acceptable := true;
            for p := 0 to length-1 do
               parameter := lineage.parameters[p];
               if (parameter < lower[p]) or (parameter > upper[p]) then
                  acceptable := false
               end
            end;
            if acceptable then
               inc(viable)
            end;
            ancestory.Next(moved)
         until ~moved;
         return viable
      end ViableCitizens;

      procedure {public} ReportHeader (sw : StreamWriter);
         var
            s : string;
      begin
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         s := "    An optimization of " + T.IntegerToString(S.dimR);
         if S.dimR = 1 then
            s := s + " random variable over "
         else
            s := s + " random variables over "
         end;
         s := s + T.IntegerToString(S.dimN) + " events";
         sw.WriteLine(s);
         sw.Flush;
         s :=     "                : -------------";
         s := s + "-- most-fit citizen ---------------";
         sw.WriteLine(s);
         sw.Flush;
         s :=     "    generation  :    fitness   ";
         s := s + " : parent similarity : adjusted R^2";
         sw.WriteLine(s);
         sw.Flush;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush
      end ReportHeader;

      procedure {public} ReportBody (sw : StreamWriter);
         var
            chromosome : C.Chromosome;
            genome     : G.Genome;
            i          : integer;
            s, s0      : string;
      begin
         s0 := T.IntegerToString(generation);
         if generation < 10 then
            s := "         " + s0
         elsif generation < 100 then
            s := "        "  + s0
         else
            s := "       "   + s0
         end;
         s  := s + "        " + T.RealToString(maxFitness, 6);
         s  := s + "      "
             + T.RealToString(elite.lineage.parentSimilarity, 3);
         s  := s + "       "    + T.RealToString(adjustedR2, 5);
         sw.WriteLine(s);
         sw.Flush;
         (* write the cromosome strings out to the temporary file *)
         chromosome := new C.Chromosome;
         genome     := new G.Genome;
         genome     := elite.Get();
         for i := 0 to genome.Strands()-1 do
            if i = 0 then
               if generation < 10 then
                  s := "      "
               elsif generation < 100 then
                  s := "     "
               else
                  s := "    "
               end;
               s := s + s0;
               s := s + " :   "    + T.IntegerToString(i+1)
            elsif i < 9 then
               s := "            " + T.IntegerToString(i+1)
            else
               s := "           "  + T.IntegerToString(i+1)
            end;
            (* cache the gene string to the temp-ga file *)
            chromosome := genome[i];
            s          := s + ")  " + chromosome.Print();
            writer.WriteLine(s);
            writer.Flush;
            inc(lines)
         end;
         s := "Generation " + s0 + " is done.";
         writeln(s)
      end ReportBody;

      procedure {public} ReportFooter (sw : StreamWriter);
         var
            i, length    : integer;
            lower, upper : S.RealVector;
            n            : real;
            reader       : StreamReader;
            s            : string;
      begin
         (* write out the statistical details of this run *)
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         s := "    total number of genes  = "
            + T.IntegerToString(numberOfGenes);
         sw.WriteLine(s);
         sw.Flush;
         s := "    size of the population = "
            + T.IntegerToString(populationSize);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of contestants  = "
            + T.IntegerToString(numberOfContestants);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of generations  = "
            + T.IntegerToString(numberOfGenerations);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of individuals  = "
            + T.IntegerToString(numberOfBorn);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of crossovers   = "
            + T.IntegerToString(numberOfCrossovers);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of mutations    = "
            + T.IntegerToString(numberOfMutations);
         sw.WriteLine(s);
         sw.Flush;
         s := "    number of immigrants   = "
            + T.IntegerToString(numberOfImmigrants);
         sw.WriteLine(s);
         sw.Flush;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         length := len(elite.lineage.parameters);
         if length = 1 then
            s := "    Optimum parameter,  +/- 50% loss in ";
         else
            s := "    Optimum parameters, +/- 50% loss in ";
         end;
         s := s + "significant-digit accuracy";
         sw.WriteLine(s);
         sw.Flush;
         Sensitivity(lower, upper);
         for i := 0 to length-1 do
            if varParam[i] then
               if i < 9 then
                  s := "    "
               else
                  s := "   "
               end;
               s := s + T.IntegerToString(i+1);
               n := lower[i];
               s := s + ")  " + T.RealToString(n, numberOfSigFigures-1);
               n := elite.lineage.parameters[i];
               s := s + " < " + T.RealToString(n, numberOfSigFigures-1);
               n := upper[i];
               s := s + " < " + T.RealToString(n, numberOfSigFigures-1);
               sw.WriteLine(s);
               sw.Flush
            end
         end;
         s := "    Out of " + T.IntegerToString(numberOfBorn);
         s := s + " creatures, ";
         i := ViableCitizens(lower, upper);
         s := s + T.IntegerToString(i);
         if length = 1 then
            s := s + " laid within this interval."
         else
            s := s + " laid within these intervals."
         end;
         sw.WriteLine(s);
         sw.Flush;
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush;
         (* move the chromosome strings from the temporary file *)
         F.CloseWriter(writer);
         reader := F.OpenReader("temp-ga");
         s := "    gen : par)   -- genotype --";
         sw.WriteLine(s);
         sw.Flush;
         for i := 1 to lines do
            sw.WriteLine(reader.ReadLine());
            sw.Flush
         end;
         F.CloseReader(reader);
         s := "    -------------------------------";
         s := s + "-------------------------------";
         sw.WriteLine(s);
         sw.Flush
      end ReportFooter;

      procedure {public} CheckOnTheState (var finished : boolean);
         var
            c            : char;
            i, length    : integer;
            lower, upper : S.RealVector;
            n            : real;
            s            : string;
      begin
         writeln();
         s := "The adjusted R^2 statistic for the elite creature is ";
         s := s + T.RealToString(adjustedR2, 5);
         writeln(s);
         length := len(elite.lineage.parameters);
         if length = 1 then
            s := "whose optimal parameter, +/- 50% loss in ";
            s := s + "significant-digit accuracy, is:"
         else
            s := "whose optimal parameters, +/- 50% loss in ";
            s := s + "significant-digit accuracy, are:"
         end;
         writeln(s);
         Sensitivity(lower, upper);
         for i := 0 to length-1 do
            if i < 9 then
               s := "    "
            else
               s := "   "
            end;
            s := s + T.IntegerToString(i+1);
            n := lower[i];
            s := s + ")  " + T.RealToString(n, numberOfSigFigures-1);
            n := elite.lineage.parameters[i];
            s := s + " < " + T.RealToString(n, numberOfSigFigures-1);
            n := upper[i];
            s := s + " < " + T.RealToString(n, numberOfSigFigures-1);
            writeln(s)
         end;
         s := "Out of " + T.IntegerToString(numberOfBorn);
         s := s + " creatures born over the history of this colony, ";
         writeln(s);
         i := ViableCitizens(lower, upper);
         s := "   " + T.IntegerToString(i);
         if length = 1 then
            s := s + " creatures laid within this parametric interval."
         else
            s := s + " creatures laid within these parametric intervals."
         end;
         writeln(s);
         writeln();
         c := " ";
         write("Do you want to CONTINUE optimization (c) or STOP it (s)?  ");
         readln(c);
         if (c = "c") or (c = "C") then
            finished := false;
            numberOfGenerations := increment + numberOfGenerations;
            writeln()
         else
            finished := true
         end
      end CheckOnTheState;

   begin
      Initialize
   end Colony;

begin
end Colonies.