(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed and Chandler Benjamin                   *)
(*                                                                            *)
(* This file is part of BEL's core suite of .NET/Mono libraries.              *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* This module creates two-dimensional data plots drawn with NPlot.           *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* NPlot home page:                                                           *)
(*    http://netcontrols.org/nplot/wiki/                                      *)
(* It is released under the terms of a 3-clause-BSD license.  Specifically:   *)
(*    NPlot - A charting library for .NET                                     *)
(*    Copyright (C) 2003-2006 Matt Howlett and others.  All rights reserved.  *)
(* Redistribution and use in source and binary forms, with or without modifi- *)
(* cation, are permitted provided that the following conditions are met:      *)
(* 1. Redistributions of source code must retain the above copyright notice,  *)
(*    this list of conditions and the following disclaimer.                   *)
(* 2. Redistributions in binary form must reproduce the above copyright       *)
(*    notice, this list of conditions and the following disclaimer in the     *)
(*    documentation and/or other materials provided with the distribution.    *)
(* 3. Neither the name of NPlot nor the names of its contributors may be used *)
(*    to endorse or promote products derived from this software without       *)
(*    specific prior written permission.                                      *)
(* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS    *)
(* IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,  *)
(* THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR     *)
(* PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRI-   *)
(* BUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, *)
(* OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF    *)
(* SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS   *)
(* INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN    *)
(* CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)    *)
(* ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE *)
(* POSSIBILITY OF SUCH DAMAGE.                                                *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* type  :  Plot                :   draws a figure which is saved as a bitmap *)
(*    methods  :  Create        :   start with a clean canvas                 *)
(*                   xPixels    :   width  of the graph in number of pixels   *)
(*                   yPixels    :   height of the graph in number of pixels   *)
(*                AddAxes       :   place axes onto the drawing canvas        *)
(*                   xIsLog     :   true if log axis; false if linear axis    *)
(*                   yIsLog     :   true if log axis; false if linear axis    *)
(*                   xLabel     :   the label to be placed below the x axis   *)
(*                   yLabel     :   the label to be placed left of the y axis *)
(*                AddLegend     :   a command; places a legend on the canvas  *)
(*                AddTitle      :   writes a title above the figure drawn     *)
(*                   title      :   what is to be written there               *)
(*                AddHistogram  :   adds histogram bar graph to plot's canvas *)
(*                   curve      :   get from Bel.Curves.Histogram procedure   *)
(*                AddLineCurve  :   adds a curve to the plot's canvas         *)
(*                   curve      :   get from Bel.Curves.LineCurve procedure   *)
(*                AddPointCurve :   adds a curve to the plot's canvas         *)
(*                   curve      :   get from Bel.Curves.PointCurve procedure  *)
(*                AddStepCurve  :   adds a curve to the plot's canvas         *)
(*                AddText       :   adds a text string to the plot's canvas   *)
(*                   text       :   the string to be written                  *)
(*                   x          :   starting x-position in world coordinates  *)
(*                   y          :   starting y-position in world coordinates  *)
(*                Save          :   writes the plot as a bitmap file          *)
(*                   fileName   :   name of the file where bitmap is stored   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.Plots;

   import
      System.Single              as Single,
      System.Double              as Double,
      System.Drawing             as Drawing,
      System.Drawing.Font        as Fonts,
      System.Drawing.Imaging     as Imaging,
      System.IO.Directory        as Directory,
      System.IO.DirectoryInfo    as DirectoryInfo,
      System.IO.File             as File,
      System.IO.Path             as Path,
      System.Reflection.Assembly as Assembly,
      NPlot                      as NP,
      Bel.Curves                 as C;

   var {private}
      asm            : Assembly;
      dir, loc, path : string;
      goldenRatio    : real;
      info           : DirectoryInfo;

   type {public}
      Location = (lowerLeft, lowerRight, upperLeft, upperRight, outside);

   type {public, ref} Plot = object

      var {private}
         axisFontSize   : Single;
         firstCurve     : boolean;
         legendFontSize : Single;
         tickFontSize   : Single;
         titleFontSize  : Single;
         xPixels        : integer;
         yPixels        : integer;
         plot           : NP.Bitmap.PlotSurface2D;

      procedure {public} Create (xPixels, yPixels : integer);
         var
            bitmap : Drawing.Bitmap;
      begin
         self.xPixels   := xPixels;
         self.yPixels   := yPixels;
         bitmap         := new Drawing.Bitmap(xPixels, yPixels);
         plot           := new NP.Bitmap.PlotSurface2D(bitmap);
         plot.Clear();
         plot.Padding   := yPixels div 20;
         plot.BackColor := Drawing.Color.White;
         plot.Refresh();
         firstCurve     := true
      end Create;

      procedure {public} AddAxes
                            (xIsLog, yIsLog : boolean; xLabel, yLabel : string);
      begin
         if xIsLog then
            plot.XAxis1 := NP.Axis(new NP.LogAxis())
         else
            plot.XAxis1 := NP.Axis(new NP.LinearAxis())
         end;
         if yIsLog then
            plot.YAxis1 := NP.Axis(new NP.LogAxis())
         else
            plot.YAxis1 := NP.Axis(new NP.LinearAxis())
         end;
         plot.AutoScaleAutoGeneratedAxes := true;
         plot.XAxis1.LabelFont    := new Fonts.Font
                                     (Drawing.FontFamily.GenericSansSerif, 
                                      axisFontSize, Drawing.FontStyle.Regular); 
         plot.YAxis1.LabelFont    := new Fonts.Font
                                     (Drawing.FontFamily.GenericSansSerif, 
                                      axisFontSize, Drawing.FontStyle.Regular);
         plot.XAxis1.TickTextFont := new Fonts.Font
                                     (Drawing.FontFamily.GenericSansSerif, 
                                      tickFontSize, Drawing.FontStyle.Regular); 
         plot.YAxis1.TickTextFont := new Fonts.Font
                                     (Drawing.FontFamily.GenericSansSerif, 
                                      tickFontSize, Drawing.FontStyle.Regular);
         plot.XAxis1.Label               := xLabel;
         plot.YAxis1.Label               := yLabel;
         plot.XAxis1.Color               := Drawing.Color.Black;
         plot.YAxis1.Color               := Drawing.Color.Black;
         plot.XAxis1.LabelOffsetAbsolute := false;
         plot.XAxis1.LabelOffsetScaled   := true;
         plot.XAxis1.TickTextNextToAxis  := false;
         plot.YAxis1.LabelOffsetAbsolute := false;
         plot.YAxis1.LabelOffsetScaled   := true;
         plot.Refresh()
      end AddAxes;

      procedure {public} AddLegend (locate : Location);
         var
            legend : NP.Legend;
      begin
         legend                 := new NP.Legend;
         legend.BackgroundColor := Drawing.Color.White;
         legend.Font := new Fonts.Font(Drawing.FontFamily.GenericSansSerif, 
                                     legendFontSize, Drawing.FontStyle.Regular);    
         legend.VerticalEdgePlacement   := NP.Legend.Placement.Inside;
         legend.HorizontalEdgePlacement := NP.Legend.Placement.Inside;
         case locate of
         | Location.lowerLeft  :
            legend.AttachTo(NP.PlotSurface2D.XAxisPosition.Bottom,
                                          NP.PlotSurface2D.YAxisPosition.Left);
            legend.XOffset :=  xPixels div 40;
            legend.YOffset := -yPixels div 40
         | Location.lowerRight :
            legend.AttachTo(NP.PlotSurface2D.XAxisPosition.Bottom,
                                          NP.PlotSurface2D.YAxisPosition.Right);
            legend.XOffset := -xPixels div 40;
            legend.YOffset := -yPixels div 40
         | Location.upperLeft  :
            legend.AttachTo(NP.PlotSurface2D.XAxisPosition.Top,
                                          NP.PlotSurface2D.YAxisPosition.Left);
            legend.XOffset :=  xPixels div 40;
            legend.YOffset :=  yPixels div 40
         | Location.upperRight :
            legend.AttachTo(NP.PlotSurface2D.XAxisPosition.Top,
                                          NP.PlotSurface2D.YAxisPosition.Right);
            legend.XOffset := -xPixels div 40;
            legend.YOffset :=  yPixels div 40
         else (* outside the figure *)
            legend.AttachTo(NP.PlotSurface2D.XAxisPosition.Top,
                                          NP.PlotSurface2D.YAxisPosition.Right);
            legend.XOffset := xPixels div 40;
            legend.YOffset := yPixels div 40
         end;
         plot.Legend := legend;
         plot.Refresh()
      end AddLegend;

      procedure {public} AddTitle (title : string);
      begin
         plot.TitleFont := new Fonts.Font(Drawing.FontFamily.GenericSansSerif, 
                                         titleFontSize, Drawing.FontStyle.Bold); 
         plot.TitleColor     := Drawing.Color.Black;
         plot.Title          := title;
         plot.AutoScaleTitle := true;
         plot.Refresh()
      end AddTitle;

      procedure {public} AddHistogram (curve : NP.HistogramPlot);
      begin
         if firstCurve then
            plot.Add(curve, NP.PlotSurface2D.XAxisPosition.Bottom,
                                           NP.PlotSurface2D.YAxisPosition.Left);
            firstCurve := false
         else
            plot.Add(curve)
         end;
         plot.Refresh()
      end AddHistogram;

      procedure {public} AddLineCurve (curve : NP.LinePlot);
      begin
         if firstCurve then
            plot.Add(curve, NP.PlotSurface2D.XAxisPosition.Bottom,
                                           NP.PlotSurface2D.YAxisPosition.Left);
            firstCurve := false
         else
            plot.Add(curve)
         end;
         plot.Refresh()
      end AddLineCurve;

      procedure {public} AddPointCurve (curve : NP.PointPlot);
      begin
         if firstCurve then
            plot.Add(curve, NP.PlotSurface2D.XAxisPosition.Bottom,
                                           NP.PlotSurface2D.YAxisPosition.Left);
            firstCurve := false
         else
            plot.Add(curve)
         end;
         plot.Refresh()
      end AddPointCurve;

      procedure {public} AddStepCurve (curve : NP.StepPlot);
      begin
         if firstCurve then
            plot.Add(curve, NP.PlotSurface2D.XAxisPosition.Bottom,
                                           NP.PlotSurface2D.YAxisPosition.Left);
            firstCurve := false
         else
            plot.Add(curve)
         end;
         plot.Refresh()
      end AddStepCurve;
  
      procedure {public} AddText (text : string; x, y : real);
         var
            position : NP.PointD;
            textItem : NP.TextItem;
            xD, yD   : Double;
      begin
         xD := x;
         yD := y;
         position := new NP.PointD(xD, yD);
         textItem := new NP.TextItem(position, text);
         textItem.TextFont := new Fonts.Font(Drawing.FontFamily.GenericSansSerif, 
                                     legendFontSize, Drawing.FontStyle.Regular);
         plot.Add(textItem);
         plot.Refresh()
      end AddText;

      procedure {public} Save (fileName : string);
         var
            bitmap  : Drawing.Bitmap;
            newFile : string;
            oldFile : string;
      begin
         newFile := Path.Combine(dir, fileName);
         newFile := Path.ChangeExtension(newFile, ".bmp");
         if File.Exists(newFile) then
            oldFile := "last_" + fileName;
            oldFile := Path.Combine(dir, oldFile);
            oldFile := Path.ChangeExtension(oldFile, ".bmp");
            if File.Exists(oldFile) then
               File.Delete(oldFile)
            end;
            File.Move(newFile, oldFile)
         end;
         bitmap := plot.Bitmap;
         bitmap.Save(newFile, Imaging.ImageFormat.Bmp)
      end Save;

   begin
      axisFontSize   := real(10, 32);
      legendFontSize := real( 9, 32);
      tickFontSize   := real( 8, 32);
      titleFontSize  := real(12, 32)
   end Plot;

begin
   asm         := Assembly.GetExecutingAssembly();
   loc         := asm.Location;
   path        := Path.GetDirectoryName(loc);
   dir         := Path.Combine(path, "iofiles");
   if ~Directory.Exists(dir) then
      info := Directory.CreateDirectory(dir)
   end
end Plots.