(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of BEL's core suite of .NET/Mono libraries.              *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates write-to and read-from UTF16-encoded text files for the framework. *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* All text files have a '.txt' extension.  No extension is required for the  *)
(* passed variable 'fileName' in procedures FileExists, OpenReader, and       *)
(* OpenWriter.  All text files are located in the directory 'iofiles' beneath *)
(* the executable.                                                            *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedures :    FileExists          - boolean check for existence of file  *)
(*                 OpenReader          - opens  a UTF16 text file for reading *)
(*                 OpenWriter          - opens  a UTF16 text file for writing *)
(*                 CloseReader         - closes a UTF16 text read-only file   *)
(*                 CloseWriter         - closes a UTF16 text write-only file  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.TextFiles;

   import
      System.IO.Directory        as Directory,
      System.IO.DirectoryInfo    as DirectoryInfo,
      System.IO.File             as File,
      System.IO.Path             as Path,
      System.IO.StreamReader     as StreamReader,
      System.IO.StreamWriter     as StreamWriter,
      System.Reflection.Assembly as Assembly,
      System.Text.Encoding       as Encoding,
      Bel.Log                    as L;

   var {private}
      asm            : Assembly;
      dir, loc, path : string;
      info           : DirectoryInfo;

   procedure {public} FileExists (fileName : string) : boolean;
      var
         file : string;
   begin
      file := Path.Combine(dir, fileName);
      file := Path.ChangeExtension(file, ".txt");
      return File.Exists(file)
   end FileExists;

   procedure {public} OpenReader (fileName : string) : StreamReader;
      var
         file, s : string;
         sr      : StreamReader;
   begin
      file := Path.Combine(dir, fileName);
      file := Path.ChangeExtension(file, ".txt");
      if ~File.Exists(file) then
         L.WarningMessage(61,-1, "Bel.TextFiles.OpenReader")
      end;
      sr := new StreamReader(file, Encoding.Unicode());
      return sr
   end OpenReader;

   procedure {public} OpenWriter (fileName : string) : StreamWriter;
      var
         autoFlush : boolean;
         newFile   : string;
         oldFile   : string;
         sw        : StreamWriter;
   begin
      newFile := Path.Combine(dir, fileName);
      newFile := Path.ChangeExtension(newFile, ".txt");
      if File.Exists(newFile) then
         oldFile := "last_" + fileName;
         oldFile := Path.Combine(dir, oldFile);
         oldFile := Path.ChangeExtension(oldFile, ".txt");
         if File.Exists(oldFile) then
            File.Delete(oldFile)
         end;
         File.Move(newFile, oldFile)
      end;
      autoFlush := true;
      sw        := new StreamWriter(newFile, autoFlush, Encoding.Unicode());
      return sw
   end OpenWriter;

   procedure {public} CloseReader (sr : StreamReader);
   begin
      sr.Close
   end CloseReader;

   procedure {public} CloseWriter (sw : StreamWriter);
   begin
      sw.Close
   end CloseWriter;

begin
   asm  := Assembly.GetExecutingAssembly();
   loc  := asm.Location;
   path := Path.GetDirectoryName(loc);
   dir  := Path.Combine(path, "iofiles");
   if ~Directory.Exists(dir) then
      info := Directory.CreateDirectory(dir)
   end
end TextFiles.