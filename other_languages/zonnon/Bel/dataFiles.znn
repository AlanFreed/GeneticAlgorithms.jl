(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of BEL's core suite of .NET/Mono libraries.              *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Creates write-to and read-from binary data files for the framework.        *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* All data files have a '.dat' extension.  No extension is required for the  *)
(* passed variable 'fileName' in procedures FileExists, OpenReader, and       *)
(* OpenWriter.  All data files are located in the directory 'iofiles' beneath *)
(* the executable.                                                            *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedures :    FileExists          - boolean check for existence of file  *)
(*                 OpenReader          - opens a binary data file for reading *)
(*                 OpenWriter          - opens a binary data file for writing *)
(*                 CloseReader         - closes a binary read-only data file  *)
(*                 CloseWriter         - closes a binary write-only data file *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.DataFiles;

   import
      System.IO.BinaryReader     as BinaryReader,
      System.IO.BinaryWriter     as BinaryWriter,
      System.IO.Directory        as Directory,
      System.IO.DirectoryInfo    as DirectoryInfo,
      System.IO.File             as File,
      System.IO.Path             as Path,
      System.IO.StreamReader     as StreamReader,
      System.IO.StreamWriter     as StreamWriter,
      System.Reflection.Assembly as Assembly,
      System.Text.Encoding       as Encoding,
      Bel.Log                    as L;

   var {private}
      asm            : Assembly;
      dir, loc, path : string;
      info           : DirectoryInfo;

   procedure {public} FileExists (fileName : string) : boolean;
      var
         file : string;
   begin
      file := Path.Combine(dir, fileName);
      file := Path.ChangeExtension(file, ".dat");
      return File.Exists(file)
   end FileExists;

   procedure {public} OpenReader (fileName : string) : BinaryReader;
      var
         br   : BinaryReader;
         file : string;
         sr   : StreamReader;
   begin
      file := Path.Combine(dir, fileName);
      file := Path.ChangeExtension(file, ".dat");
      if ~File.Exists(file) then
         L.WarningMessage(60,-1, "Bel.DataFiles.OpenReader")
      end;
      sr := new StreamReader(file, Encoding.Unicode());
      br := new BinaryReader(sr.BaseStream());
      return br
   end OpenReader;

   procedure {public} OpenWriter (fileName : string) : BinaryWriter;
      var
         bw        : BinaryWriter;
         autoFlush : boolean;
         newFile   : string;
         oldFile   : string;
         sw        : StreamWriter;
   begin
      newFile := Path.Combine(dir, fileName);
      newFile := Path.ChangeExtension(newFile, ".dat");
      if File.Exists(newFile) then
         oldFile := "last_" + fileName;
         oldFile := Path.Combine(dir, oldFile);
         oldFile := Path.ChangeExtension(oldFile, ".dat");
         if File.Exists(oldFile) then
            File.Delete(oldFile)
         end;
         File.Move(newFile, oldFile)
      end;
      autoFlush := true;
      sw        := new StreamWriter(newFile, autoFlush, Encoding.Unicode());
      bw        := new BinaryWriter(sw.BaseStream());
      return bw
   end OpenWriter;

   procedure {public} CloseReader (br : BinaryReader);
   begin
      br.Close
   end CloseReader;

   procedure {public} CloseWriter (bw : BinaryWriter);
   begin
      bw.Close
   end CloseWriter;

begin
   asm  := Assembly.GetExecutingAssembly();
   loc  := asm.Location;
   path := Path.GetDirectoryName(loc);
   dir  := Path.Combine(path, "iofiles");
   if ~Directory.Exists(dir) then
      info := Directory.CreateDirectory(dir)
   end
end DataFiles.