(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of BEL's core suite of .NET/Mono libraries.              *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Provides a math library for numbers defined for us in this framework.      *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* References: Press et al., Numerical Recipes in C, Cambridge U. Press, 1992 *)
(*             Spanier, J. and Oldham, K.B., An Atlas of Functions,           *)
(*                         Hemisphere Publishing Corp., Washington DC, 1987.  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* constants   : E           - 2.7182818284590452354, base of natural logs    *)
(*             : PI          - 3.1415926535897932385, the number \pi          *)
(* Functions   : Random      - a random number bound to interval [0,1]        *)
(*             : Max         - returns the greater of the two arguments       *)
(*             : Min         - returns the lesser of the two arguments        *)
(*             : Ceiling     - returns smallest integer number >= argument    *)
(*             : Floor       - returns greatest integer number <= argument    *)
(*             : Round       - returns the nearest integer to a real argument *)
(*             : Abs         - returns the absolute value of a number         *)
(*             : Sign        - returns the sign of a number                   *)
(*             : Sqrt        - returns the square root of a number            *)
(*             : Power       - returns the power  x^y  or  x**y               *)
(*             : Pythag      - returns Pythagorean distance Sqrt(x^2 + y^2)   *)
(*             : Log         - returns the base 10 log of a number            *)
(*             : Ln          - returns the base e or natural log of a number  *)
(*             : Exp         - returns the exponential of a number            *)
(*             : Sin         - returns the sine of a number                   *)
(*             : Cos         - returns the cosine of a number                 *)
(*             : Tan         - returns the tangent of a number                *)
(*             : ArcSin      - returns the arcus sine of a number             *)
(*             : ArcCos      - returns the arcus cosine of a number           *)
(*             : ArcTan      - returns the arcus tangent of a number          *)
(*             : ArcTan2     - returns quadrant correct arcus tangent of y/x  *)
(*             : Sinh        - returns the hyperbolic sine of a number        *)
(*             : Cosh        - returns the hyperbolic cosine of a number      *)
(*             : Tanh        - returns the hyperbolic tangent of a number     *)
(*             : ArcSinh     - returns the arcus hyperbolic sine of a number  *)
(*             : ArcCosh     - returns the arcus hyperbolic cosine of a real  *)
(*             : ArcTanh     - returns the arcus hyperbolic tangent of a real *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} Bel.Math;

   import
      System.Math   as Fn,
      System.Random as RG,
      Bel.Series    as S,
      Bel.Types     as T;

   (* the private variables, functions, and procedures of this module *)

   var {private}  
      maxIterations   : integer;
      nearInfinity    : real;
      randomGenerator : RG;

   (* the public variables, functions, procedures, etc. of this module *)

   var {public, immutable}
      E, PI : real;

   procedure {public} Random () : real;
   begin
      return real(randomGenerator.NextDouble())
   end Random;

   procedure {public} Max (x, y : real) : real;
   begin
      return real(Fn.Max(x, y))
   end Max;

   procedure {public} Min (x, y : real) : real;
   begin
      return real(Fn.Min(x, y))
   end Min;

   procedure {public} Ceiling (x : real) : real;
   begin
      return real(Fn.Ceiling(x))
   end Ceiling;

   procedure {public} Floor (x : real) : real;
   begin
      return real(Fn.Floor(x))
   end Floor;

   procedure {public} Round (x : real) : real;
   begin
      return real(Fn.Round(x))
   end Round;

   procedure {public} Abs (x : real) : real;
   begin
      return abs(x)
   end Abs;

   procedure {public} Sign (x : real) : real;
      var
         y : real;
   begin
      if T.IsFinite(x) then
         if x > 0.0 then
            y := 1.0
         elsif x < -0.0 then
            y := -1.0
         else
            y := 0.0
         end
      elsif x = T.PositiveInfinity then
         y := 1.0
      elsif x = T.NegativeInfinity then
         y := -1.0
      else
         y := 0.0
      end;
      return y
   end Sign;

   procedure {public} Sqrt (x : real) : real;
   begin
      return real(Fn.Sqrt(x))
   end Sqrt;

   procedure {public} Power (x, y : real) : real;
   begin
      return real(Fn.Pow(x,y))
   end Power;

   (* computes the Pythagorean distance:  Sqrt(x^2 + y^2) *)
   procedure {public} Pythag (x, y : real) : real;
      var
         absx, absy, dist, ratio : real;
   begin
      absx := abs(x);
      absy := abs(y);
      if absx > absy then
         ratio := absy / absx;
         dist  := absx * Sqrt(1.0 + ratio*ratio)
      elsif absy = 0.0 then
         dist := 0.0
      else
         ratio := absx / absy;
         dist  := absy * Sqrt(1.0 + ratio*ratio)
      end;
      return dist
   end Pythag;

   procedure {public} Log (x : real) : real;
   begin
      return real(Fn.Log10(x))
   end Log;

   procedure {public} Ln (x : real) : real;
   begin
      return real(Fn.Log(x))
   end Ln;

   procedure {public} Exp (x : real) : real;
   begin
      return real(Fn.Exp(x))
   end Exp;

   procedure {public} Sin (x : real) : real;
   begin
      return real(Fn.Sin(x))
   end Sin;

   procedure {public} Cos (x : real) : real;
   begin
      return real(Fn.Cos(x))
   end Cos;

   procedure {public} Tan (x : real) : real;
   begin
      return real(Fn.Tan(x))
   end Tan;

   procedure {public} ArcSin (x : real) : real;
   begin
      return real(Fn.Asin(x))
   end ArcSin;

   procedure {public} ArcCos (x : real) : real;
   begin
      return real(Fn.Acos(x))
   end ArcCos;

   procedure {public} ArcTan (x : real) : real;
   begin
      return real(Fn.Atan(x))
   end ArcTan;

   (* the quadrant-correct arcus tangent for y/x *)
   procedure {public} ArcTan2 (y, x : real) : real;
   begin
      return real(Fn.Atan2(y, x))
   end ArcTan2;

   procedure {public} Sinh (x : real) : real;
   begin
      return real(Fn.Sinh(x))
   end Sinh;

   procedure {public} Cosh (x : real) : real;
   begin
      return real(Fn.Cosh(x))
   end Cosh;

   procedure {public} Tanh (x : real) : real;
   begin
      return real(Fn.Tanh(x))
   end Tanh;

   procedure {public} ArcSinh (x : real) : real;
      var
         y : real;
   begin
      if T.IsFinite(x) then
         if x < -0.0 then
            y := -ArcSinh(-x)
         elsif x <= 0.0 then
            y := 0.0
         elsif x < nearInfinity then
            y := Ln(x + Sqrt(x)*Sqrt(x + 1.0/x))
         else
            y := T.PositiveInfinity
         end
      elsif x = T.PositiveInfinity then
         y := T.PositiveInfinity
      elsif x = T.NegativeInfinity then
         y := T.NegativeInfinity
      else
         y := T.NaN
      end;
      return y
   end ArcSinh;

   procedure {public} ArcCosh (x : real) : real;
      var
         y : real;
   begin
      if T.IsFinite(x) then
         if x < 1.0 then
            y := T.NaN
         elsif x = 1.0 then
            y := 0.0
         elsif x < nearInfinity then
            y := Ln(x + Sqrt(x)*Sqrt(x - 1.0/x))
         else
            y := T.PositiveInfinity
         end
      elsif x = T.PositiveInfinity then
         y := T.PositiveInfinity
      else
         y := T.NaN
      end;
      return y
   end ArcCosh;

      procedure {public} ArcTanhCoefA
                              (n : integer; x : real; var eos : boolean) : real;
         var
            coef : real;
      begin
         if n = 0 then
            coef := 0.0
         elsif n = 1 then
            coef := 1.0
         else
            coef := x * real(n - 1);
            coef := -coef*coef
         end;
         if n > maxIterations then
            eos := true
         end;
         return coef
      end ArcTanhCoefA;

      procedure {public} ArcTanhCoefB
                              (n : integer; x : real; var eos : boolean) : real;
         var
            coef : real;
      begin
         if n = 0 then
            coef := 0.0
         else
            coef := real(2*n - 1)
         end;
         if n > maxIterations then
            eos := true
         end;
         return coef
      end ArcTanhCoefB;

   procedure {public} ArcTanh (x : real) : real;
      var
         y : real;
   begin
      if T.IsFinite(x) then
         if x > 1.0 then
            y := T.NaN
         elsif x = 1.0 then
            y := T.PositiveInfinity
         elsif x > 0.1 then
            y := Ln((1.0 + x)/(1.0 - x)) / 2.0
         elsif x > -0.1 then
            y := x * S.ContinuedFraction(ArcTanhCoefA, ArcTanhCoefB, x)
         elsif x > -1.0 then
            y := Ln((1.0 + x)/(1.0 - x)) / 2.0
         elsif x = -1.0 then
            y := T.NegativeInfinity
         else
            y := T.NaN
         end
      else
         y := T.NaN
      end;
      return y
   end ArcTanh;
 
begin
   E  := real(Fn.E);
   PI := real(Fn.PI);

   maxIterations := 1000;
   nearInfinity  := Sqrt(T.MaximumReal);

   (* uses Environment.TickCount as random seed *)
   randomGenerator := new RG()
end Math.