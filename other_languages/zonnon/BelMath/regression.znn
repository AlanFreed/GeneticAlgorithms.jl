(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-Math suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Provides algorithms for least-squares regression of data to models.        *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Procedures                                                                 *)
(*  Two-Parameter Models: also return the coefficient of determination, R^2   *)
(*    Linear       fits : y = k0 + k1*x                                       *)
(*    Exponential  fits : y = k0*exp(k1*x)                                    *)
(*    PowerLaw     fits : y = k0*x^k1                                         *)
(*    StretchedExp fits : y = exp(k0*x^k1)                                    *)
(*  Three-Parameter Models                                                    *)
(*    Quadratic    fits : y = k0 + k1*x + k2*x^2                              *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} BelMath.Regression;

   import
      Bel.Log                as L,
      Bel.Math               as Fn,
      BelMath.Interpolations as I;

   procedure {public} Linear (x, y : I.RealVector; var k0, k1, rSquared : real);
      var
         det, err, sse, xBar, xyBar, x2Bar, yBar, y2Bar : real;
         dim, i                                         : integer;
   begin
      dim := len(x);
      if len(y) = dim then
         xBar  := 0.0;
         yBar  := 0.0;
         x2Bar := 0.0;
         y2Bar := 0.0;
         xyBar := 0.0;
         for i := 0 to dim-1 do
            xBar  := xBar  + x[i];
            yBar  := yBar  + y[i];
            x2Bar := x2Bar + Fn.Power(x[i], 2.0);
            y2Bar := y2Bar + Fn.Power(y[i], 2.0);
            xyBar := xyBar + x[i] * y[i]
         end;
         xBar  := xBar  / dim;
         yBar  := yBar  / dim;
         x2Bar := x2Bar / dim;
         y2Bar := y2Bar / dim;
         xyBar := xyBar / dim;
         det   := x2Bar - xBar * xBar;
         k0    := (x2Bar * yBar - xBar * xyBar) / det;
         k1    := (xyBar - xBar * yBar) / det;
         sse   := 0.0;
         for i := 0 to dim-1 do
            err := y[i] - k0 - k1 * x[i];
            sse := sse + err * err
         end;
         sse      := sse / dim;
         rSquared := 1.0 - sse / (y2Bar - Fn.Power(yBar, 2.0))
      else
         L.WarningMessage(212,425, "BelMath.Regression.Linear");
         k0       := 0.0;
         k1       := 0.0;
         rSquared := 0.0
      end
   end Linear;

   procedure {public} Quadratic
                         (x, y : I.RealVector; var k0, k1, k2, rSquared : real);
      var
         det, err, sse, xBar, x2Bar, x3Bar,
            x4Bar, xyBar, x2yBar, yBar, y2Bar : real;
         dim, i                               : integer;
   begin
      dim := len(x);
      if len(y) = dim then
         xBar   := 0.0;
         x2Bar  := 0.0;
         x3Bar  := 0.0;
         x4Bar  := 0.0;
         yBar   := 0.0;
         y2Bar  := 0.0;
         xyBar  := 0.0;
         x2yBar := 0.0;
         for i := 0 to dim-1 do
            xBar   := xBar   + x[i];
            x2Bar  := x2Bar  + Fn.Power(x[i], 2.0);
            x3Bar  := x3Bar  + Fn.Power(x[i], 3.0);
            x4Bar  := x4Bar  + Fn.Power(x[i], 4.0);
            yBar   := yBar   + y[i];
            y2Bar  := y2Bar  + Fn.Power(y[i], 2.0);
            xyBar  := xyBar  + x[i] * y[i];
            x2yBar := x2yBar + Fn.Power(x[i], 2.0) * y[i]
         end;
         xBar   := xBar   / dim;
         x2Bar  := x2Bar  / dim;
         x3Bar  := x3Bar  / dim;
         x4Bar  := x4Bar  / dim;
         yBar   := yBar   / dim;
         y2Bar  := y2Bar  / dim;
         xyBar  := xyBar  / dim;
         x2yBar := x2yBar / dim;
         det := x2Bar * x4Bar + 2.0 * xBar * x2Bar * x3Bar
              - x3Bar * x3Bar - xBar * xBar * x4Bar - x2Bar * x2Bar * x2Bar;
         k0 := ((x2Bar * x4Bar - x3Bar * x3Bar) * yBar
              + (x2Bar * x3Bar - xBar * x4Bar) * xyBar
              + (xBar * x3Bar  - x2Bar * x2Bar) * x2yBar) / det;
         k1 := ((x2Bar * x3Bar - xBar * x4Bar) * yBar
              + (x4Bar - x2Bar * x2Bar) * xyBar
              + (xBar * x2Bar - x3Bar) * x2yBar) / det;
         k2 := ((xBar * x3Bar - x2Bar * x2Bar) * yBar
              + (xBar * x2Bar - x3Bar) * xyBar
              + (x2Bar - xBar * xBar) * x2yBar) / det;
         sse := 0.0;
         for i := 0 to dim-1 do
            err := y[i] - k0 - k1 * x[i] - k2 * Fn.Power(x[i], 2.0);
            sse := sse + err * err
         end;
         sse := sse / dim;
         rSquared := 1.0 - sse / (y2Bar - Fn.Power(yBar, 2.0))
      else
         L.WarningMessage(212,425, "BelMath.Regression.Quadratic");
         k0       := 0.0;
         k1       := 0.0;
         k2       := 0.0;
         rSquared := 0.0
      end
   end Quadratic;

   procedure {public} Exponential
                             (x, y : I.RealVector; var k0, k1, rSquared : real);
      var
         dim, i : integer;
         k      : real;
         lnY    : I.RealVector;
   begin
      dim := len(x);
      if len(y) = dim then
         lnY := new I.RealVector(dim);
         for i := 0 to dim-1 do
            lnY[i] := Fn.Ln(y[i])
         end;
         Linear(x, lnY, k, k1, rSquared);
         k0 := Fn.Exp(k)
      else
         L.WarningMessage(212,425, "BelMath.Regression.Exponential");
         k0       := 0.0;
         k1       := 0.0;
         rSquared := 0.0
      end
   end Exponential;

   procedure {public} PowerLaw
                             (x, y : I.RealVector; var k0, k1, rSquared : real);
      var
         dim, i   : integer;
         k        : real;
         lnX, lnY : I.RealVector;
   begin
      dim := len(x);
      if len(y) = dim then
         lnX := new I.RealVector(dim);
         lnY := new I.RealVector(dim);
         for i := 0 to dim-1 do
            lnX[i] := Fn.Ln(x[i]);
            lnY[i] := Fn.Ln(y[i])
         end;
         Linear(lnX, lnY, k, k1, rSquared);
         k0 := Fn.Exp(k)
      else
         L.WarningMessage(212,425, "BelMath.Regression.PowerLaw");
         k0       := 0.0;
         k1       := 0.0;
         rSquared := 0.0
      end
   end PowerLaw;

   procedure {public} StretchedExp
                             (x, y : I.RealVector; var k0, k1, rSquared : real);
      var
         dim, i     : integer;
         k          : real;
         lnX, lnlnY : I.RealVector;
   begin
      dim := len(x);
      if len(y) = dim then
         lnX   := new I.RealVector(dim);
         lnlnY := new I.RealVector(dim);
         for i := 0 to dim-1 do
            lnX[i]   := Fn.Ln(x[i]);
            lnlnY[i] := Fn.Ln(Fn.Ln(y[i]))
         end;
         Linear(lnX, lnlnY, k, k1, rSquared);
         k0 := Fn.Exp(k)
      else
         L.WarningMessage(212,425, "BelMath.Regression.PowerLaw");
         k0       := 0.0;
         k1       := 0.0;
         rSquared := 0.0
      end
   end StretchedExp;

begin
end Regression.