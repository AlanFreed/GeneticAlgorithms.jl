(* ------|---------|---------|---------|---------|---------|---------|------- *)
(*       BBBB      EEEEE     L         The                                    *)
(*       B   B     E         L           BIOLOGICAL                           *)
(*       BBBB      EEE       L           ENGINEERING                          *)
(*       B    B    E         L           LABORATORY                           *)
(*       BBBBB     EEEEEE    LLLLLL        @ Saginaw Valley State University  *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Copyright 2008-2013, Alan D. Freed                                         *)
(*                                                                            *)
(* This file is part of the BEL-Math suite of .NET/Mono libraries.            *)
(*                                                                            *)
(* BEL is a free software: you can redistribute it and/or modify it under the *)
(* terms of the GNU Lesser General Public License as published by the Free    *)
(* Software Foundation, either version 3 of the License, or (at your option)  *)
(* any later version.                                                         *)
(*                                                                            *)
(* BEL is distributed in the hope that it will be useful, but WITHOUT ANY     *)
(* WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS  *)
(* FOR A PARTICULAR PURPOSE.  See the GNU Lesser General Public License for   *)
(* more details.                                                              *)
(*                                                                            *)
(* You should have received a copy of the GNU Lesser General Public License   *)
(* along with BEL.  If not, see <http://www.gnu.org/licenses/>.               *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* A selection of quadrature and weight rules to estimate the integral        *)
(*   y = int_a^b f(x) dx                                                      *)
(* where                                                                      *)
(*   y  is the solution sought                                                *)
(*   f  is a user-supplied function, the integrand                            *)
(*   a  is the lower limit of integration                                     *)
(*   b  is the upper limit of integration                                     *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)
(* Type       : Method         -  select method for estimating an integral    *)
(*                 trapezoidal :  (b - a)(f(a) + f(b))/2                      *)
(*                 simpson     :  (b - a)(f(a) + 4f((a+b)/2) + f(b))/6        *)
(*                 threeEights :  (b - a)(f(a) + 3f((2a+b)/3)                 *)
(*                                             + 3f((a+2b)/3) +f(b))/8        *)
(*                 romberg     :  trapezoidal with Richardson extrapolation   *)
(*                 gauss       :  Gauss with a Kronrod error estimate         *)
(* Type       : F              -  a procedure type                            *)
(*                 x           :  argument of the function                    *)
(* Type       : Data           -  internal, used with Gauss-Kronrod method    *)
(* Procedure  : Integrate      -  int_a^b f(x) dx                             *)
(*                 f           :  an instance of F                            *)
(*                 a           :  the lower limit of integration              *)
(*                 b           :  the upper limit of integration              *)
(*                 m           :  selects rule used:  an instance of Method   *)
(* ------|---------|---------|---------|---------|---------|---------|------- *)

module {public} BelMath.Integrals;

   import
      System.IO.BinaryReader as BinaryReader,
      System.IO.BinaryWriter as BinaryWriter,
      Bel.Log                as L,
      Bel.Object             as Object,
      Bel.Keys               as K,
      Bel.List               as List,
      Bel.Types              as T,
      Bel.Math               as Fn,
      BelMath.Interpolations as I;

   const
      (* stops Richardson extrapolation in Romberg integrator when exceeded *)
      maxIterations = 100;
      (* stops Romberg and Guass integration whenever error goes below this *)
      tolerance = 0.0000000001;

   var {private}
      maxKey, nodes              : integer;
      node, wgtGauss, wgtKronrod : I.RealVector;

   type {public}
      (* selects the method of integration *)
      Method = (trapezoidal, simpson, threeEights, romberg, gauss);
      (* function type whose integral is sought *)
      F = procedure (real) : real;

   (* type used locally for data storage by the Gauss-Kronrod integrator *)
   type {public, ref} Data = object implements Object
      var {public}
         a, b, error, soln : real;

      procedure {public} Initialize
         implements Object.Initialize;
      begin
         a     := 0.0;
         b     := 0.0;
         error := 0.0;
         soln  := 0.0
      end Initialize;

      procedure {public} Nullify
         implements Object.Nullify;
      begin
         Initialize
      end Nullify;

      procedure {public} Clone () : object{Object}
         implements Object.Clone;
         var
            d : Data;
            o : object{Object};
      begin
         d := new Data;
         o := Object(d);
         return o
      end Clone;

      procedure {public} Store (bw : BinaryWriter)
         implements Object.Store;
      begin
         T.StoreReal(bw, a);
         T.StoreReal(bw, b);
         T.StoreReal(bw, error);
         T.StoreReal(bw, soln)
      end Store;

      procedure {public} Load (br : BinaryReader)
         implements Object.Load;
      begin
         a     := T.LoadReal(br);
         b     := T.LoadReal(br);
         error := T.LoadReal(br);
         soln  := T.LoadReal(br)
      end Load;

   begin
      Initialize
   end Data;

   procedure {public} Integrate (f : F; a, b : real; m : Method) : real;
      var
         h, y : real;
   begin
      y := 0.0;
      if f # nil then
         if a = b then
            y := 0.0
         elsif a > b then
            y := Integrate(f, b, a, m);
            y := -y
         else
            case m of Method.trapezoidal :
               h := (b - a) / 2.0;
               y := h*(f(a) + f(b))
            | Method.simpson :
               h := (b - a) / 6.0;
               y := h*(f(a) + 4.0*f((a+b)/2.0) + f(b))
            | Method.threeEights :
               h := (b - a) / 8.0;
               y := h*(f(a) + 3.0*f((2.0*a+b)/3.0)
                  + 3.0*f((a+2.0*b)/3.0) + f(b))
            | Method.romberg :
               y := Romberg(f, a, b)
            | Method.gauss :
               y := Gauss(f, a, b)
            else
               L.WarningMessage(70,415, "BelMath.Integrals.Integrate")
            end
         end
      else
         L.WarningMessage(500,415, "BelMath.Integrals.Integrate")
      end;
      return y
   end Integrate;

   procedure {private} Romberg (f : F; a, b : real) : real;
      var
         add, eCurr, eLast, h, p, y : real;
         i, j, k                    : integer;
         yCurr, yLast               : I.RealVector;
   begin
      h        := (b - a) / 2.0;
      j        := 1;
      k        := 2;
      p        := 4.0;
      yLast    := new I.RealVector(1);
      yLast[0] := h*(f(a) + f(b));
      yCurr    := new I.RealVector(2);
      yCurr[0] := yLast[0]/2.0 + h*f(a + h);
      yCurr[1] := yCurr[0] + (yCurr[0] - yLast[0]) / (p - 1.0);
      if abs(yCurr[1]) < 1.0 then
         eCurr := abs(yCurr[1] - yLast[0])
      else
         eCurr := abs((yCurr[1] - yLast[0]) / yCurr[1])
      end;
      loop
         yLast := nil;
         yLast := new I.RealVector(k);
         yLast := yCurr;
         inc(k);
         h   := h / 2.0;
         j   := 2 * j;
         add := 0.0;
         for i := 1 to j do
            add := add + f(a + real(2*i-1) * h)
         end;
         yCurr    := nil;
         yCurr    := new I.RealVector(k);
         yCurr[0] := yLast[0] / 2.0 + h * add;
         for i := 1 to k-1 do
            p := 4.0 * p;
            yCurr[i] := yCurr[i-1] + (yCurr[i-1] - yLast[i-1]) / (p - 1.0)
         end;
         eLast := eCurr;
         if abs(yCurr[k-1]) < 1.0 then
            eCurr := abs(yCurr[k-1] - yLast[k-2])
         else
            eCurr := abs((yCurr[k-1] - yLast[k-2]) / yCurr[k-1])
         end;
         if eCurr < tolerance then
            y := yCurr[k-1];
            exit
         end;
         if eCurr > eLast then
            y := yLast[k-2];
            L.WarningMessage(55,-1, "BelMath.Integrals.Romberg");
            exit
         end;
         if k > maxIterations then
            y := yCurr[k-1];
            L.WarningMessage(80,-1, "BelMath.Integrals.Romberg");
            exit
         end
      end;
      return y
   end Romberg;

   (* the following are used by the Gauss-Kronrod itegrator *)

   procedure {private} GetKey (a, b, atX : real) : K.Key;
      var
         k     : K.Key;
         ratio : real;
   begin
      ratio := (atX - a) / (b - a);
      if ratio > 1.0 then
         ratio := 1.0
      end;
      if ratio < 0.0 then
         ratio := 0.0
      end;
      k := integer(ratio * real(maxKey));
      return k
   end GetKey;

   procedure {private} Gauss (f : F; a, b : real) : real;
      var
         bigError, err, error, midPoint, tol, y : real;
         bigKey, key                            : K.Key;
         converged, ignor, moved                : boolean;
         data                                   : object{Object};
         history                                : List;
         ld, rider                              : Data;
         s                                      : string;
   begin
      y         := 0.0;
      history   := new List;
      rider     := new Data;
      converged := false;
      ignor     := true;
      moved     := false;
      tol       := 100.0 * T.Epsilon;
      GaussKronrod(f, a, b, err, y);
      ld       := new Data;
      ld.a     := a;
      ld.b     := b;
      ld.error := err;
      ld.soln  := y;
      key      := GetKey(a, b, b);
      history.Insert(ld, key, ignor);
      repeat
         (* search for the interval with largest error estimate *)
         history.Home;
         data     := nil;
         data     := history.GetData();
         rider    := Data(data);
         bigError := rider.error;
         bigKey   := history.GetKey();
         history.Next(moved);
         while moved do
            data  := nil;
            data  := history.GetData();
            rider := Data(data);
            if rider.error > bigError then
               bigError := rider.error;
               bigKey   := history.GetKey()
            end;
            history.Next(moved)
         end;
         (* bisect interval with largest error estimate *)
         history.Find(bigKey, ignor);
         data     := nil;
         data     := history.GetData();
         rider    := Data(data);
         midPoint := (rider.a + rider.b) / 2.0;
         key      := GetKey(a, b, midPoint);
         if key < bigKey then
            (* remove that part of solution with greatest error *)
            err := err - rider.error;
            y   := y - rider.soln;
            (* reintegrate the left half of this sub-interval *)
            ld   := nil;
            ld   := new Data;
            ld.a := rider.a;
            ld.b := midPoint;
            GaussKronrod(f, ld.a, ld.b, error, ld.soln);
            ld.error := error * (ld.b - ld.a) / (b - a);
            err      := err + ld.error;
            y        := y + ld.soln;
            history.Insert(ld, key, ignor);
            (* reintegrate the right half of this sub-interval *)
            ld   := nil;
            ld   := new Data;
            ld.a := midPoint;
            ld.b := rider.b;
            GaussKronrod(f, ld.a, ld.b, error, ld.soln);
            ld.error := error * (ld.b - ld.a) / (b - a);
            err      := err + ld.error;
            y        := y + ld.soln;
            history.Update(ld, bigKey, ignor);
            if abs(y) < 1.0 then
               error := err
            else
               error := abs(err / y)
            end;
            if error < tol then
               converged := true
            end
         else
            s := "In a call to BelMath.Integrals.Gauss";
            L.Message(s);
            s := "   integration was not able to further sub-divide";
            L.Message(s);
            s := "   its interval of integration at x = ";
            s := s + T.RealToString(rider.b, 17);
            L.Message(s);
            converged := true
         end
      until converged;
      return y
   end Gauss;

   procedure {private} GaussKronrod
                              (f : F; a, b : real; var absError, result : real);
      var
         i                                             : integer;
         abscissa, center, fAbove, fBelow, fCenter,
            fSum, gauss, halfLength, kronrod, rndError : real;
   begin
      center     := (a + b) / 2.0;
      halfLength := (b - a) / 2.0;
      fCenter    := f(center);
      kronrod    := wgtKronrod[nodes-1] * fCenter;
      if odd(nodes) then
         gauss := 0.0
      else
         gauss := wgtGauss[(nodes div 2) - 1] * fCenter
      end;
      for i := 0 to nodes-2 do
         abscissa := halfLength * node[i];
         fAbove   := f(center + abscissa);
         fBelow   := f(center - abscissa);
         fSum     := fAbove + fBelow;
         kronrod  := kronrod + wgtKronrod[i] * fSum;
         if odd(i) then
            gauss := gauss + wgtGauss[i div 2] * fSum
         end
      end;
      result   := halfLength * kronrod;
      absError := abs(halfLength * (kronrod - gauss));
      rndError := abs(T.Epsilon * result);
      absError := Fn.Max(absError, rndError)
   end GaussKronrod;

begin
   maxKey := max(integer);
   nodes  := 31;
   node   := new I.RealVector(nodes);
   node   := [0.99948441005049063757E+0, 0.99689348407464954027E+0,
              0.99163099687040459485E+0, 0.98366812327974720997E+0,
              0.97311632250112626837E+0, 0.96002186496830751221E+0,
              0.94437444474855997941E+0, 0.92620004742927432587E+0,
              0.90557330769990779854E+0, 0.88256053579205268154E+0,
              0.85720523354606109895E+0, 0.82956576238276839744E+0,
              0.79972783582183908301E+0, 0.76777743210482619491E+0,
              0.73379006245322680472E+0, 0.69785049479331579693E+0,
              0.66006106412662696137E+0, 0.62052618298924286114E+0,
              0.57934523582636169175E+0, 0.53662414814201989926E+0,
              0.49248046786177857499E+0, 0.44703376953808917678E+0,
              0.40040125483039439253E+0, 0.35270472553087811347E+0,
              0.30407320227362507737E+0, 0.25463692616788984643E+0,
              0.20452511668230989143E+0, 0.15386991360858354696E+0,
              0.10280693796673703014E+0, 0.05147184255531769583E+0,
              0.00000000000000000000E+0];
   wgtGauss := new I.RealVector(nodes div 2);
   wgtGauss := [0.00796819249616660561E+0, 0.01846646831109095914E+0,
                0.02878470788332336934E+0, 0.03879919256962704959E+0,
                0.04840267283059405290E+0, 0.05749315621761906648E+0,
                0.06597422988218049512E+0, 0.07375597473770520626E+0,
                0.08075589522942021535E+0, 0.08689978720108297980E+0,
                0.09212252223778612871E+0, 0.09636873717464425963E+0,
                0.09959342058679526706E+0, 0.10176238974840550459E+0,
                0.10285265289355884034E+0];
   wgtKronrod := new I.RealVector(nodes);
   wgtKronrod := [0.00138901369867700762E+0, 0.00389046112709988405E+0,
                  0.00663070391593129217E+0, 0.00927327965951776342E+0,
                  0.01182301525349634174E+0, 0.01436972950704580481E+0,
                  0.01692088918905327262E+0, 0.01941414119394238117E+0,
                  0.02182803582160919229E+0, 0.02419116207808060136E+0,
                  0.02650995488233310161E+0, 0.02875404876504129284E+0,
                  0.03090725756238776247E+0, 0.03298144705748372603E+0,
                  0.03497933802806002413E+0, 0.03688236465182122922E+0,
                  0.03867894562472759295E+0, 0.04037453895153595911E+0,
                  0.04196981021516424614E+0, 0.04345253970135606931E+0,
                  0.04481480013316266319E+0, 0.04605923827100698811E+0,
                  0.04718554656929915394E+0, 0.04818586175708712914E+0,
                  0.04905543455502977888E+0, 0.04979568342707420635E+0,
                  0.05040592140278234684E+0, 0.05088179589874960649E+0,
                  0.05122154784925877217E+0, 0.05142612853745902593E+0,
                  0.05149472942945156755E+0]
end Integrals.